# chapter 02 - 01 볼 차례 
# numpy 공식 문서 : numpy.org/devdocs/reference/ : 함수 검색해서 설명과 예제를 볼 수 있다. 

import numpy as np

x = np.arange(15).reshape(3,5)
y = np.random.rand(15).reshape(3,5)

print(x)
print(y)

"""
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]]
[[0.86968967 0.94691662 0.76704069 0.93542937 0.64560946]
 [0.70405816 0.85912009 0.73341001 0.51644118 0.58291845]
 [0.96277622 0.04133363 0.05244708 0.25541701 0.81852802]]

"""

np.add(x,y) #각 요소끼리 더한다. 0과 0.8696을 더하고, index가 같은 원소끼리 더한다. 

"""
array([[ 0.86968967,  1.94691662,  2.76704069,  3.93542937,  4.64560946],
       [ 5.70405816,  6.85912009,  7.73341001,  8.51644118,  9.58291845],
       [10.96277622, 11.04133363, 12.05244708, 13.25541701, 14.81852802]])
"""

#add할떄 shape이 다른 경우

import numpy as np

x = np.arange(15).reshape(3,5)
y = np.random.rand(16).reshape(4,4)

print(x)
print(y)

#3행 5열과 4행 4열을 더하는 경우 : shape이 다르면 연산이 안된다. ※broadcast는 예외

np.add(x,y)

"""
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-4-54d4c09f1966> in <module>
----> 1 np.add(x,y)

ValueError: operands could not be broadcast together with shapes (3,5) (4,4) 

"""

np.subtract(x,y)
np.mutiply(x,y)
np.divide(x,y)

#명령어를 쓰지 않고, 연산자를 써서 표현한다. + / - 

#통계함수- 평균값
np.mean(y)
 # 결과값 : 0.4694951621883521
y.mean() #numpy가 아니더라도 기본 함수에 내장되어 있다. 
 # 결과값 : 0.4694951621883521
 
#최대값
 np.max(y) 
  #최대값 수치를 반환 
 np.argmax(y)
  #최대값 수치가 어디있는지 위치를 반환 결과값 : 3 ※ 행/열 무시하고 순번으로 반환 
 np.var(y) #분산
 np.median(y) #중앙값
 np.std(y) #표준편차

#집계함수 - sum /cumsum(누적합계)

np.sum(y)
 #결과값 : 7.511922595013633
np.cumsum(y)
 """
 결과값 - 계속 쌓여가면서 된다. (그래프 그릴때 좋다.) 
 array([0.85458057, 0.9388799 , 1.82466284, 2.79621082, 3.6811574 ,
       3.72968866, 3.74556817, 4.24399853, 4.3909932 , 5.34943098,
       5.53460802, 5.59075949, 6.47589076, 6.57144619, 7.33235471,
       7.5119226 ])
 
 """
 np.sum(y,axis=0) #0 or 1, 열 축으로 sum,  행 축으로 sum
 
 #any, all 함수
 
 z=np.random.randn(10)
print(z)

"""
[ 2.75385701 -0.80195002  0.53452817  0.2971816   1.24440152 -1.78145777
  0.84879051  0.19892911  1.2460855  -0.1523161 ]
"""

np.any(z>0) #결과값 :True / 각각 원소를 0과 비교해서 결과값이 하나라도 참이면 참이다.
np.all(z>0) #결과값 :False / 각각 원소를 0과 비교해서 모두 참이어야 참을 반환, 하나라도 틀리면 false
roof가 필요없다.

#where 함수 #가장 많이 쓰는 함수다. 조건에 따라 값을 산별적으로 선택할 수 있는 함수 

z=np.random.randn(10)
print(z)
"""
[-0.96562212  0.02281316  0.59769934  0.11207994  0.46479791  0.11692164
 -0.78857877  0.91860626  1.81838812 -0.49342609]
"""

np.where() #인자가 3개, 1.조건식, 2.조건식이 참일 경우 쓸 값, 3. 조건식이 거짓일 경우 쓸 값 
np.where(z>0,z,0)
"""
array([0.        , 0.02281316, 0.59769934, 0.11207994, 0.46479791,
       0.11692164, 0.        , 0.91860626, 1.81838812, 0.        ])
"""
# 양수인 경우는 그 숫자를 그대로 쓰고, 음수인경우 0으로 처리
# numpy를 안할경우 for문을 써야 한다. 
