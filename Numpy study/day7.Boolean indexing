# 02- 03강 볼 차례 
# Boolean Indexing - 많이 쓰이는 기술
# ndarry 인덱싱시, bool 리스트를 전달하여 True인 경우만 필터링

import numpy as np
x = np.random.randint(1,100,size=10)
print(x)

#결과값 : [30 42 21 54 57 93 58 35 54 42]

x % 2 ==0

"""
array([ True,  True, False,  True, False, False,  True, False,  True,
        True])
"""

even_mask = x % 2 ==0
print(even_mask)

#결과값 : [ True  True False  True False False  True False  True  True]

x[even_mask]
#결과값 : array([30, 42, 54, 58, 54, 42]) - True 인것만 뽑아준다.

x[x % 2==0] #한번에 표현할 수 있다. 
#결과값 : array([30, 42, 54, 58, 54, 42])

x[x>30]
#array([42, 54, 57, 93, 58, 35, 54, 42])

# 다중조건 사용하기 and, or, not 키워드 사용 불가 -> & - and, \ - or

x[(x%2==0) & (x<50)]

#결과값 : array([30, 42, 42])

x[(x%2==0) | (x<50)]

# 결과값 : array([30, 42, 21, 54, 58, 35, 54, 42])
# not은기호를 쓰는 것보다 기호를 반대로 명시해주는 걸로 한다. 

"""
예제 : 2019년 7월 서울 평균기온 데이터
       평균기온이 25도를 넘는 날수는?
       평균기온이 25를 넘는 날의 평균 기온은?
       
 temp = np.array([23.9,24.4,24.1,25.4,27.6,29.7,26.7,25.1,
 25.0,22.7,21.9,23.6,24.9,25.9,23.8,24.7,25.6,26.9,28.6,28.0,
 25.1,26.7,28.1,26.5,26.3,25.9,28.4,26.1,27.5,28.1,25.8])
 
 len(temp) #결과값 : 31
 
 len(temp[temp > 25.0])
 np.sum(temp>25.0)
 
 #결과값 : 둘다 21
 
 np.mean(temp[temp>25.0])
 #결과값 : 26.857142857142858
 
 정리 : 1. 해당 조건의 array를 만들어서 boolean array를 만들고
       2. boolean array를 인덱싱 





