#random 서브 모듈 (rand 함수 : 0,1사이의 분포로 랜덤함 ndarray 생성

import numpy as np
np.random.rand(2,3) #2행 3열의 행렬을 랜덤한 숫자로
"""
array([[0.51365807, 0.79432655, 0.51886296],
       [0.52467441, 0.36176577, 0.09639393]])
"""

np.random.rand(2,3,4)
"""
array([[[0.09630186, 0.86055291, 0.84644507, 0.79000573],
        [0.96886966, 0.08066893, 0.70806591, 0.3473477 ],
        [0.05559686, 0.53871116, 0.64947849, 0.1155601 ]],

       [[0.79048687, 0.20982823, 0.46518849, 0.06716322],
        [0.29719533, 0.5458728 , 0.86395018, 0.4757295 ],
        [0.75392826, 0.15143529, 0.48404068, 0.62653045]]])
"""

#randn함수 : 정규분포로 샘플링된 랜덤 ndarray 생성 normal distribute 라서 n
np.random.randn(3,4) #정규분포라서 음수값을 가진다. 

"""
array([[ 1.7141257 ,  0.09971806, -0.81145089,  0.99054523],
       [ 0.9996923 , -0.61875838, -0.59144938, -1.50743352],
       [ 0.21370231,  1.01094571, -1.6204096 ,  0.77218682]])
"""

np.random.randn(3,4,2)
"""
array([[[ 1.42785568, -1.21266621],
        [ 0.21623772,  0.76921923],
        [-0.99130247,  0.03194861],
        [ 0.8735859 , -0.43754067]],

       [[-0.5623641 ,  1.98375735],
        [ 0.50408978,  0.14132757],
        [ 0.0418584 ,  0.01177208],
        [-0.45333966, -0.76026644]],

       [[ 0.51299713, -0.56141208],
        [-0.01691594, -0.93185254],
        [-1.18173086, -0.42220777],
        [ 0.21489056, -0.19749802]]])
"""

#randint 함수 : 실수가 아닌 정수에서 인출 
np.random.randint(1,100,size=(3,5)) #low면 포함, high면 비포함 
"""
array([[55, 10, 30, 25, 26],
       [42, 51, 10, 86, 89],
       [44, 68, 44, 23, 82]])
"""

#엔터를 칠때마다 변수가 달라져서, 랜덤함 값을 다음에 동일하게 생성하고자 할떄, 고정된 랜덤값
np.random.seed(100)
np.random.randn(3,4)

#seed 함수호출 후 rand를 칠 경우 계속 엔터를 쳐도 랜덤값이 고정된다. 

#choice함수 : 주어진 1차원 ndarray로 부터 랜덤으로 샘플링 
#정수가 주어진 경우 np.arange(해당숫자로)로간주
np.random.choice(100,size=(3,4))
"""
array([[71, 80,  2, 94],
       [19, 98, 63, 53],
       [27, 56, 30, 48]])
"""

#choice함수는 array가 정해진 것에서도 뽑아 올 수 있다.
#replace설정은 뽑았던 숫자를 또 뽑을지 결정한다.
x = np.array([1,2,3,1.5,2.6,4.9])
np.random.choice(x,size=(2,2),replace=False)

"""
array([[4.9, 1.5],
       [2. , 2.6]])
"""

#확률분포에 따른 ndarray 생성 
#uniform과 정규분포 

np.random.uniform(1.0,3.0,size=(4,5))#low와 high사이의 값을 가져온다. 
"""
array([[2.72589134, 1.14973376, 2.65018972, 2.67226363, 1.15078982],
       [1.02280158, 1.09684114, 1.71424542, 2.33138675, 1.02277922],
       [1.21583553, 2.8020262 , 2.58975752, 2.62292196, 2.28055611],
       [2.24955902, 1.29101502, 2.1404318 , 1.130225  , 1.62682514]])
"""
np.random.normal(size=(3,4)) #normal과 randn은 같다.. 
"""
array([[ 0.14253625, -1.49639345,  0.30687456, -0.04634723],
       [ 0.41714428, -0.60377052,  0.68596725,  0.85997379],
       [ 0.19155544,  1.17822793,  0.60028357, -1.84465986]])
"""

np.random.randn(3,4)
"""
array([[ 0.04258809, -0.02408499,  0.38405784, -0.0490925 ],
       [-1.60169118, -0.13876257,  0.01208627, -1.29814417],
       [-0.12888604, -0.28292163, -0.17916825,  0.67575177]])
"""
