# ravel, np.ravel : 다차원 배열을 1차원으로 변경 
# order 파마미터 c- row우선 / f- column 우선 

x=np.arange(15).reshape(3,5)
print(x)

"""
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]]
"""

x.ravel() #결과 : array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
np.ravel(x) #결과 같음 

x=np.arange(15).reshape(3,5)
print(x)

temp = x.ravel()
print(temp)

temp[0]=100
print(temp)
print(x)
#ravel을 바꾸면 원본 데이터도 바뀐다. 
"""
[100   1   2   3   4   5   6   7   8   9  10  11  12  13  14]
[[100   1   2   3   4]
 [  5   6   7   8   9]
 [ 10  11  12  13  14]]
"""


#flatten : 다차원 배열을 1차원으로 변경 / ravel과 차이점 : copy를 생성하여 변경함 (즉 원본 데이터가 아닌 복사본을 반환) 
x.flatten() #결과 : x.flatten()

y=np.arange(15).reshape(3,5)
print(y)

t2=y.flatten()
print(t2)

t2[0]=100
print(t2)
print(y)

"""
[100   1   2   3   4   5   6   7   8   9  10  11  12  13  14]
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]]
"""
x=np.arange(15).reshape(3,5)
print(x)

temp = x.ravel(order='F') #열기준
print(temp) # 결과값 : [100   5  10   1   6  11   2   7  12   3   8  13   4   9  14]

temp = x.ravel(order='c') #행기준
print(temp) #결과값 : [100   1   2   3   4   5   6   7   8   9  10  11  12  13  14]

x=np.arange(30).reshape(2,3,5)
print(x)

x.ravel()
"""
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
"""

#reshape함수 : array의 shape를 다른 차원으로 변경 
# 주의 할점 : reshape한 후의 결과의 전체 원소 개수와 이전 개수가 같아야 가능 
# 사용 예 ) 이미지 데이터 벡터화 - 이미지는 기본적으로 2차원 혹은 3차원(RGB)이나 트레이닝을 위해 1차원으로 변경하여 사용됨

i = np.arange(36)
print(x)
print(x.shape)

"""
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35]
(36,) #1차원이기 떄문에 
"""
print(i.ndim) #결과 : 1 - 1차원이라는 뜻 

i.reshape(6,6)
"""
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35]])
"""
i.reshape(6,-1) # 결과가 같다. 행이 6개인 행렬을 해주는데 나머지는 알아서 해줘라 
i.reshape(-1,6) # 결과가 같다. 열이 6개인 행렬을 해주는데 나머지는 알아서 해라. 

p=i.reshape(-1,6)
print(p.shape) #결과 (6,6)

i.reshape(5,6)
#결과 : 에러 
# ValueError: cannot reshape array of size 36 into shape (5,6)

q = i.reshape(3,-1,4) #여기서 -1은 알아서 맞춰라 
print(q)
print(q.shape)
print(q.ndim)

"""
[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]

 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]

 [[24 25 26 27]
  [28 29 30 31]
  [32 33 34 35]]]
(3, 3, 4)
3

"""

#주의할 사항은 딱 두가지 : reshape 전후가 갯수가 같아야 한다, 행/열하나를 정하고 -1을 쓰면 나머지는 알아서 해준다. 

