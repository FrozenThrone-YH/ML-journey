package exception.multi;

import java.util.Scanner;

public class MultiCatchExample {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		try {
			System.out.println("1번째 데이터 : ");
			String data1 = sc.next();
			System.out.println("2번째 데이터 : ");
			String data2 = sc.next();
			
			//NumburFormat 발생가능!(데이터를 문자로 입력했을때)
			int val1 = Integer.parseInt(data1);
			int val2 = Integer.parseInt(data2);
			
			//Arithmetic 발생 가능! (0으로 나눈 경우)
			int result = val1/val2;
			System.out.println(val1+" / "+val2+" = "+result);
		    
			//내가 인지하지 못한 에러인 경우
		    String str = null;
		    str.charAt(0);
			
			
		  //Exception 클래스는 모든 예외 가능성을 처리할 수 있다.
		  //다형성이라고 보면 된다. 
		  //Exception이 예외처리 최상위 클래스이기 때문에
		  //경우의 수를 나누려면 자식 클래스로 형변환해서 instanceof 처럼 쓴다. 
//		}  catch(Exception e) {
//			System.out.println("알 수 없는 예외 발생!");
//			System.out.println("확인 후 신속히 처리하겠습니다.");
//			/*
//			 * catch로 알수 없는 에러 처리를 맨앞으로 한 경우 아래 error 발생
//			 * Unreachable catch block for NumberFormatException. 
//			 * It is already handled by the catch block for Exception
//			 * 모든 예외를 여기서 받기 때문에 아래 catch가 실행이 안된다.
//			 */
//		}
		}
		   catch (NumberFormatException e) {
			System.out.println("데이터를 숫자만 넣어주세요.");
			
			//2가지 이상 예외 사항이 있을때 처리하는 방법은?
		} catch(ArithmeticException e){
			System.out.println("0으로 나눌 수 없습니다.");
		}catch(Exception e) {
			System.out.println("알 수 없는 예외 발생!");
			System.out.println("확인 후 신속히 처리하겠습니다.");
			/*
			 * 알수 없는 예외처리는 맨 마지막에 넣어야 한다.
			 * if - else처럼
			 */
		}finally {
			sc.close();
		}
		System.out.println("프로그램 정상 종료!");
	}

}
