Person p1 = new Person("홍길동");
Person p2 = new Person("이순신");

//Person이 많아지면 Person 배열로 관리하는 것이 좋다
Person[] people = new Person[10];

people[0] = p1;
for (Person p : people){
s.o.p(p.infor())
}

Student p3 = new Student();
Teacher p4 = new Teacher();

person을 상속하고 있어서 비슷한점이 있다.
다형성을 이용하면 배열로 묶을 수 있다. 다형성을 이용하면 타입이 달라고 다 묶을 수 있다. 

A class를 B와 C가 상속하고 있고, D는B를 상속하고 있고, E는 C를 상속하는 경우
상속관계가가 있는 클래스 들을, 서로의 타입을 교환위해 사용할 수 있습니다. 

A a = new A();
A b = new B();
A c = new C();
A d = new D();
A e = new E();

자식 객체가 부모의 타입을 사용할 수 있다.
객체의 교환성을 제고하기 위함. 

package poly.basic;
/*
 * 하나의 클래스 파일안에 여러 클래스들을 선언할 수 있습니다.
 * 단, 파일명과 동일한 이름을 가진 클래스가 반드시 존재해야하며
 * 해당 클래스만 public 제한자를 가질 수 있습니다. 
 * 
 */
class A{}
class B extends A{}
class C extends A{}
class D extends B{}
class E extends C{}

public class basic {
	/*
	 * 다형성이란 자식객체가 부모의 타입을 가질 수 있는 특성을 의미합니다.
	 * 즉, 부모타입 변수에 자식 객체의 주소값을 언제든지 저장시킬 수 있다는 것입니다.
	 */
	
	A a = new A();
	B b = new B();
	C c = new C();
	D d = new D();
	E e = new E();
	
	A a1 = b; //b의 주소값을 A타입의 a1에 넣을 수 있다. 
	          //형 변환이라고 생각하면 된다 (promotion)
	A a2 = new B();
	A a3 = c;
	A a4 = d; //D와 A는 직접 상속은 아니지만 A를 가지고 있다. 
	B b1 = new D(); //자식객체는 자기 자신말고도 부모의 타입을 가질 수 있다.
	C c1 = new E();
	
//	B b2 = new E(); //상속관계가 없다면 다형성 적용이 불가능.
//	C c2 = new D(); //형제, 삼촌 조카 관계 이런거 없다. 
	
	Object o1 = new A(); //Object는 모두의 부모이다. 
	
	
	byte x = 10;
	int y = x;
	

}
