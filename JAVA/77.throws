package exception.throw_;

public class ThrowExample1 {
	
	public static String[] greetings = {"안녕","니하오","헬로"};
	
	public static void main(String[] args) {
		/*
		 * throws가 붙어 있는 메서드나 생성자를 호출할 때는
		 * 반드시 try 블록 내부에서 호출하여 예외처리를 진행해야 합니다.
		 * 또는 또다시 throws하여 예외처리를 다시 한번 떠넘길수 있습니다. 
		 */
		try {
		greet(3);
		//Unhandled exception type Exception
		//greet 함수에 throws를 붙이면 error가 나면 부른사람 잘못이니까
		//try catch문을 적어줘야 한다.
		} catch(Exception e) {
			/*
			 * printStackTrace()는 예외발생 경로를 추적하는 
			 * 메세지를 출력해줍니다.
			 * 주로 개발과정에서 예외의 원인을 찾을 때 유용하게 
			 * 사용합니다. 
			 */
			e.printStackTrace();//예외처리 됐는데, error 명 보고 싶을때 
			System.out.println("안녕");
		}System.out.println("프로그램 정상 종료!");
	}
	/*
	 *예외의 원인이 메서드 선언부가 아닌 호춯부에 있을 경우
	 *예외처리를 메서드 호출자에게 떠넘기는 방식을 throws라고 합니다.
	 *메서드나 생성자 호출 시 예외처리를 강요하고 싶을 때 사용합니다.  
	 */
	public static void greet(int index) throws Exception {
		//알면 해당 Exception을 적어주고 모르면 Exception
		System.out.println(greetings[index]);
		 
	}
}
package exception.throw_;

public class ThrowsExample2 {
	
	public void aaa(int n) throws Exception{
		
		System.out.println("aaa 호출!");
		int i = 10/n;
		System.out.println("계산결과 :"+i);
		System.out.println("aaa 실행 종료!");
		
	}
	
	public void bbb() throws Exception{
		System.out.println("bbb 호출!");
		aaa(0);
		System.out.println("bbb 실행 종료!");
	}
	public void ccc() throws Exception {
		System.out.println("ccc호출!");
		bbb();
		System.out.println("ccc 실행 종료!");
		
		
	}
	
	public ThrowsExample2() throws Exception {
		System.out.println("생성자 호출!");
		ccc();
		System.out.println("생성자 실행 종료!");
	}
	public static void main(String[] args) {
		
		try {
			ThrowsExample2 te = new ThrowsExample2();	
		} catch (Exception e) {
			
		}
		
		
	}
}
