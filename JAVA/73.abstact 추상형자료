package abs.goodcase;

public abstract class HeadStore {
	
	/*
	 * 1.메서드에 abstract를 붙이면 해당 메서드는 추상 메서드가 되며
	 * 이 메서드는  상속을 통해 자식 클래스에서 반드시 오버라이딩을 해야합니다.
	 * 그렇지 않으면 에러가 발생합니다
	 * 2. 추상 메서드는 실체가 존재하지 않는 메서드의 틀 역할을 하기 때문에
	 * 메서드의 바디 부분({})이 없고 세미 콜론으로 메서드선언을 마감합니다
	 * 3. 일반 클래스에서는 추상 메서드를 선언할 수 없습니다. 추상 메서드가 
	 * 하나라도 존재하는 클래스는 반드시 추상 클래스가 되어야 합니다.
	 * 4. 추상 클래스 내부에서는 추상 메서드만을 선언할 필요는 없습니다.
	 * 일반 메서드도 모두 선언할 수 있습니다. 
	 */
	public HeadStore() {
		System.out.println("HeadStore의 생성자가 호출됨!");
		
	}
	
	public abstract void orderApple();
	//추상메서드만 ; 세미콜론으로 끝낸다. 
	public abstract void orderBanana();
	public abstract void orderGrape();
	public abstract void orderMelon();
	//지점에서 설정해야하는데, 안하면 에러난다.
	
	public void orderWatermelon() {
		System.out.println("수박 쥬스의 가격은 4000원입니다.");
		
	} //본사 지침인데, 지점에서 알아서 바꿀 수 있다. 
	
	public final void orderPeach() {
		System.out.println("복숭아 쥬스의 가격은 2000원입니다.");
		
	}//final은 재정의가 안된다. 본사 지침인데, 이 지침은 바꿀 수 없다. 
}
package abs.goodcase;

public class Store extends HeadStore{
//The type Store must implement the inherited abstract method HeadStore.orderBanana()
//상속하자마자 error가 뜬다.
	
	//생성자가 있는데 숨어 있다.
	public Store() {
		
		super(); // 이것이 숨어 있다. 
	}
	
	public void orderBanana() {
		
		System.out.println("바나나 쥬스의 가격은 2800원입니다.");
		
	}
	public void orderMelon() {
		
		System.out.println("멜론 쥬스의 가격은 4800원 입니다.");
	}
	
	public void orderGrape() {
		System.out.println("포도 쥬스의 가격은 3000원 입니다.");
		
	}
	public void orderApple() {
		System.out.println("사과 쥬스의 가격은 1000원 입니다. ");
		
	}
	//오버라이드가 강제된다. 
	public void orderWatermelon() {
		
		System.out.println("수박 쥬스의 가격은 4500원입니다.");
		
	}
//	public void orderPeach() {}
	//final은 override가 안된다. 
}
package abs.goodcase;

public class MainClass {

	public static void main(String[] args) {
		
//		HeadStore h = new HeadStore();
		//Cannot instantiate the type HeadStore
		/*
		 * 추상클래스는 스스로 객체를 생성할 수 없습니다.
		 * 반드시 상속을 통해 클래스를 구체화 시켜야 합니다.
		 */
		
		Store s = new Store();
		s.orderApple();
		s.orderWatermelon();
		s.orderPeach();
	
		

	}

}
