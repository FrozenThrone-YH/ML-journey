package kr.co.hee.jdbc.user.model;

import java.sql.*;
import java.util.*;

//DAO클래스는 DB작업을 전담처리합니다.
public class UserDAO {
	
	//DAO는 객체 하나만 생성하게 제한해야한다. 
	String url = "jdbc:mysql://localhost:3306/jsp_practice";
	String uid = "jsp";
	String upw = "jsp";
	
	//싱글톤 패턴 클래스 생성.
	//1. 클래스 외부에서 객체를 생성할 수 없도록 생성자에 private제한을 붙임.
	//private을 쓰면 생성자 생성할 수 있는 영역은 지금 class안
	private UserDAO() {
		//처음 생성됐을때 driver호출
		try {
			Class.forName("com.mysql.jdbc.Driver");
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//2. 자신의 클래스 내부에서 스스로의 객체를 1개를 생성함.
	//공유 객체로 만들어야 하니까 static을 붙인다.
	private static UserDAO dao = new UserDAO();
	
	//3. 외부에서 객체를 달라고 할때 method를 통해 전달한다. 
	//외부에서 써야하니까 public이고, 객체 없이 만들어야 하니까 static
	public static UserDAO getInstance() {
		if(dao!=null) {
			//혹시 생성자가 만들어지지 않았을 수 있으므로
			//한번더 생성자를 만든다.
			dao = new UserDAO();
		}
		//미리 만들어둔 단 하나의 객체만 리턴
		return dao;
	}
	//UserDAO에서는 회원관리에 필요한 DB연동 로직들을 메서드로 나열하여 작성.
	
	//DB에 회원가입 데이터를 INSERT하는 메서드 선언
	//자바빈 클래스를 입력으로 받는다. 
	public int join(UserVo users){
		
		String sql = "INSERT INTO users VALUES (?,?,?,?,?,?,?)";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		int rn=0;
		try {
			conn = DriverManager.getConnection(url,uid,upw);
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, users.getName());
			pstmt.setString(2, users.getId());
			pstmt.setString(3, users.getPw());
			pstmt.setString(4, users.getPhone1());
			pstmt.setString(5, users.getPhone2());
			pstmt.setString(6, users.getPhone3());
			pstmt.setString(7, users.getGender());
			
			rn = pstmt.executeUpdate();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close(); pstmt.close();
			} catch(Exception e2) {
				e2.printStackTrace();
			}
		}
	return rn;
	}
	
	//DB로부터 모든 회원정보를 가져오는 메서드 선언.
	public List<UserVo> userSelectAll(){
		
		List<UserVo> userList = new ArrayList<>();
		String sql = "SELECT * FROM users";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = DriverManager.getConnection(url,uid,upw);
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				
				
				UserVo users= new UserVo(
						rs.getString("name"),
						rs.getString("id"),
						rs.getString("pw"),
						rs.getString("phone1"),
						rs.getString("phone2"),
						rs.getString("phone3"),
						rs.getString("gender")
						);
				userList.add(users);
			}
			
			
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				conn.close(); pstmt.close(); rs.close();
			}catch(Exception e2) {
				e2.printStackTrace();
			}
		}
		return userList;
		
	}
	
	//회원탈퇴를 처리하는 메서드 선언.
	public int userDelete(String id){
		String sql = "DELETE FROM users WHERE id=?";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		int rn=0;
		try {
			conn = DriverManager.getConnection(url,uid,upw);
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);
			
			rn = pstmt.executeUpdate();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close(); pstmt.close();
			} catch(Exception e2) {
				e2.printStackTrace();
			}
		}
	return rn;
	}
	
}
