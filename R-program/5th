
#목차

#plot() : 분포도나 꺽은선 그릴 수 있다.
 #plot.new()
 #dev.new()
 #응용하기 

#par(mfrow=c(nr,nc)) : nr:행의 갯수, nc:열의 갯수 / 그래프의 배치 조정하기 
 
#par(mgp=c(제목위치, 지표값위치, 지표선위치) 그래프 여백 조정

#oma(bottom,left,top,right)그래프 전체 여백 조정 

#par(new=T) / 여러개의 그래프를 중첩으로 그리기 
#legend(x축 위치, y축 위치, 내용, cex=글자크기,col=색상, pch=크기, lty=선모양) / 범례 추가 
#
##barplot() : 막대그래프
 #t()함수 : 전치행렬
#
#
#
#
#

---------------------------------------------------------------------------------------------
1교시
#기본설정
setwd("C:\\r_data")

install.packages("dplyr")
library(dplyr)
install.packages("reshape2")
library(reshape2)
install.packages("plyr")
library(plyr)
install.packages("stringr")
library(stringr)

#plot() : 분포도나 꺽은선 그릴 수 있다.

> library(stringr)
> v1=c(2,2,2)
> plot(v1)
> x=1:3
> y=3:1
> plot(x,y,xlim = c(1,10),ylim=c(1,5)) ※x와 y의 축 값이 설정된다.
> plot(x,y,xlim = c(1,10),ylim=c(1,5),xlab="x축 값",ylab="y축값",main="Plot Test")
  ※각 축의 이름과 그래프의 이름을 설정

  #plot.new() : 그래프를 지우고 다시 그릴때 사용한다. 
  #dev.new() : 새로운 창이 하나뜨고, 창에 그림이 그려진다.

> v1=c(100,130,120,160,150)
> plot(v1)
  ※이렇게만 하면 산점도만 나온다.
  > plot(v1,type='o') 이렇게하면 데이터를 잇는 선이 나타난다.
  > plot(v1,type='o',col='red',ylim=c(0,200)) ※칼라 지정 / y축값 설정
  > plot(v1,type='o',col='red',ylim=c(0,200),axes=FALSE) 이렇게하면 축이 없어 진다. 
  > plot(v1,type='o',col='red',ylim=c(0,200),axes=FALSE, ann=FALSE) 이렇게하면 x축 y축 제목도 사라진다. 
    -> 그래프만 남는다. 
  > axis(1)  ※1은 x축
    이렇게하니 x축이 생긴다. 
  > axis(1,at=1:5,lab=c("MON","TUE","WED","THU","FRI")) ※축 범위 지정 /  라벨지정
     but 라벨이 겹친다.
  > axis(2) ※2는 y축
  > title(main="FRUIT",col.main='red',font.main=4) ※ 축제목/축제목색깔/축제목크기
  > title(xlab="DAY",col.lab='black')
  > title(ylab="PRICE",col.lab='blue')

  ※ 기존의 출력된 그래프위에 겹쳐서 출력이 가능하다. 
  ※ 전체를 선택한후 한번에 실행하면 겹쳤던 x축 name이 하나만 나타난다.

#mfrow (그래프의 배치 조정하기 - multi frow로 생각하면 됨)
#par(mfrow=c(nr,nc)) : nr:행의 갯수, nc:열의 갯수 

> v1
[1] 100 130 120 160 150
> plot.new()
> par(mfrow=c(1,3)) ※plot.new()를 하기 전에 계속 1행 3열로 그래프가 나온다. 
> plot(v1,type='o')
> plot(v1,type='s')
> plot(v1,type='l')

#type : p,l,b,c,o,h,s,S,n  
h는 히스토그램 

> pie(v1) #원형그래프
> barplot(v1) #바그래프

> par(mfrow=c(1,1))  ※ 다시 창에 하나의 그래프만 뜨도록 설정
> a=c(1,2,3)
> plot(a,xlab='aaa')

#그래프 여백 조정
#par(mgp=c(제목위치, 지표값위치, 지표선위치) 
 ※제목위치 : 각 축의 제목의 위치- 그래프로 부터 떨어진 정도
   지표값 : x/y축 지표의 위치 

> par(mgp=c(0,1,0)) 
> plot(a,xlab='aaa')
> par(mgp=c(3,1,0))
> plot(a,xlab='aaa')
> par(mgp=c(3,2,2))
> plot(a,xlab='aaa')

#그래프전체여백조정
#oma(bottom,left,top,right)
  ※끝에서 부터 크기가 줄어든다. 0이 제일 크고, 숫자가 갈수록 축소 된다.


#여러개의 그래프를 중첩해서 그리기 (명령어를 나눠서 치면 그려진 그래프에 계속 추가 되기 때문)
 - 하나의 그래프에 3개를 겹쳐서 그릴 수 있다. 

#par(new=T)

> v1=c(1,2,3,4,5)
> v2=c(5,4,3,2,1)
> v3=c(3,4,5,6,7)
> plot(v1,type='s',col='red',ylim=c(1,5))
> par(new=T)  ※중복을 허용하겠다는 의미
> plot(v2,type='o',col='blue',ylim=c(1,5))
> par(new=T)
> plot(v3,type='l',col='green') ※3,4,5,6,7 이 겹치니 표 지표값이 겹친다. 
  ※ 리미트의 영역이 다르니, 표가 지저부해지고, 명확성이 떨어진다.

plot으로 중첩으로 그래프를 그릴때 지표값이 겹치니 이렇게해서는 안된다.
처음에 경향성 확인할때만 plot으로 그린다. 

> plot.new()
> v1=c(1,2,3,4,5)
> v2=c(5,4,3,2,1)
> v3=c(3,4,5,6,7)
> plot(v1,type='s',col='red',ylim=c(1,10))

여기까지하고, lines라는 함수로 사용한다.

> lines(v2,type='o',col='blue',ylim=c(1,5)) ※겹쳐지지도 않고, 자기가 그리는 영역내에서 그림이 그려진다.
> lines(v3,type='l',col='green',ylim=c(1,15))

#범례 추가 
#legend(x축 위치, y축 위치, 내용, cex=글자크기,col=색상, pch=크기, lty=선모양)
0은 블랭크 1은 실선 2는 점선, 3은 더 촘촘한 점선, 4는 - ㅡ- ㅡ- 5  ㅡㅡㅡ 6  - ㅡ- ㅡ-

> legend(4,9,c('v1','v2','v3'),cex=0.9,col=c('red','blue','green'),lty=1)
> lines(v2,type='o',col='blue',ylim=c(1,5),lty=3) 선타임은 lines에도 적용된다. 

---------------------------------------------------------------------------------------------
2교시
#막대그래프
#barplot() : 막대그래프

> x=c(1,2,3,4,5)
> barplot(x)
> barplot(x, horiz=T) ※이렇게하면 x축과 y축이 바뀐다.

> x=matrix(c(5,4,3,2),2,2)
> x
     [,1] [,2]
[1,]    5    3
[2,]    4    2
> barplot(x) ※ 이렇게하면 겹쳐 보인다.
> barplot(x,beside=T) ※ 이렇게하면 분리되서 보인다.

> barplot(x,beside=T,names=c(5,3),col=c('green','yellow'))
> barplot(x,beside=T,names=c(5,3),col=c('green','yellow'),ylim=c(0,12))
  ※리미트를 설정해줘야 넘어가는 걸 방지할 수 있다. 

> barplot(x,beside=T,names=c(5,3),horiz=T,col=c('green','yellow'),ylim=c(0,12))

> barplot(x,beside=T,names=c(5,3),horiz=T,col=c('green','yellow'),xlim=c(0,12))
   ※ 축을 변환했을때, x축 리미트로 설정을 해줘야한다.

> v1=c(100,120,140,160,180)
> v2=c(120,130,150,140,170)
> v3=c(140,170,120,110,160)
> qty=data.frame(BANANA=v1,CHERRY=v2,ORANGE=v3)
> qty
  BANANA CHERRY ORANGE
1    100    120    140
2    120    130    170
3    140    150    120
4    160    140    110
5    180    170    160

> barplot(as.matrix(qty))
 ★barplot을 그룹으로 묶어서 그릴때는 반드시 출력대상이 matrix여야한다.!! 중요중요
   그래서 as.matrix로 처리 

> barplot(as.matrix(qty),main="FRUIT SALES QTY",beside=T,ylim=c(0,300),col=rainbow(nrow(qty)))
  ※무지개색 중 몇개를 가져와서 표현한다. 
> legend(16,300,c("MON","TUE","WED","THU","FRI"),cex=0.8,fill=rainbow(nrow(qty)))

x축을 요일로 표현하고, 범례를 바나나,체리, 오렌지로 하고 싶으면 어떻게 해야할까?
#t()함수 : 전치행렬

> barplot(t(qty))

> barplot(t(qty), main="FRUIT SALES QTY",ylim=c(0,900),col=rainbow(length(qty)),space=1)
 ※ space는 막대의 간격
> barplot(t(qty), main="FRUIT SALES QTY",ylim=c(0,900),col=rainbow(length(qty)),space=1,cex.axis=0.8)
 ※ cex.axis -> 지표값 글자 크기
> barplot(t(qty), main="FRUIT SALES QTY",ylim=c(0,900),col=rainbow(length(qty)),space=1,cex.axis=0.8,las=1)
 ※las=0이면 글자가 누워있고, 1이면 글자가 똑바로 
> barplot(t(qty), main="FRUIT SALES QTY",ylim=c(0,900),col=rainbow(length(qty)),space=1,cex.axis=0.8,las=1,
          names.arg=c("MON","TUE","WED","THU","FRI"),cex=0.8)
> legend(2,800,names(qty),cex=0.7,fill=rainbow(length(qty)))

> qty
  BANANA CHERRY ORANGE
1    100    120    140
2    120    130    170
3    140    150    120
4    160    140    110
5    180    170    160
> t(qty)
       [,1] [,2] [,3] [,4] [,5]
BANANA  100  120  140  160  180
CHERRY  120  130  150  140  170
ORANGE  140  170  120  110  160

#조건을 주고 그래프 그리기 
 peach값이 200이상일 경우는 "red", 180-199는 "yellow", 그 이하는 "green"색으로 출력

강사님 답

> peach=c(180,200,250,198,170)
>     colors=c(colors,'green')
> for (i in 1:length(peach)) {
+   if (peach[i]>=200) {
+     colors=c(colors,'red')
+   } else if (peach[i]>=180){
+     colors=c(colors,'yellow')
+   } else {
+     colors=c(colors,'green')
+   }
+ }

내가 좀 수정한거

peach=c(180,200,250,198,170)
for (i in 1:length(peach)) {
  if (peach[i] >= 200) {
    colors[i]='red'
  } else if (peach[i] >= 180){
    colors[i]='yellow'
  } else {
    colors[i]='green'
  }
}
barplot(peach,main="PEACH SALES QTY",names.arg=c("MON","TUE","WED","THU","FRI"),col=colors)


그렇다면 함수식으로는?

> f1=function(fruits){
+   colors=NULL
+   for (i in 1:length(fruits)){
+     if (fruits[i] >= 200){
+       colors[i]='red'
+     } else if (fruits[i] >= 180){
+       colors[i]='yellow'
+     } else {
+       colors[i]='green'
+     }
+   }
+   return(colors)
+ }
> f1(peach)
[1] "yellow" "red"    "red"    "yellow" "green" 
> barplot(peach,main="PEACH SALES QTY",names.arg=c("MON","TUE","WED","THU","FRI"),col=f1(peach))

★상당히 많이 쓰이는 포맷



---------------------------------------------------------------------------------------------
3교시
#hist() : 히스토그램 - 특정 데이터의 빈도수를 막대로 나타낸것.

> h=c(182,175,167,172,163,178,181,166,159,155)
> hist(h, main="histogram of height")

#pie() : 전체합이 100이 되어야하는 경우 서로 비교할 때 좋은 함수

> par(oma=c(0.5,0.5,1,0.1))
> p1=c(10,20,30,40)
> pie(p1)
> pie(p1,radius=1)
> pie(p1,radius=1,init.angle=90) ※시작각도가 90도가 된다.
> pie(p1,radius=1,init.angle=90,col=rainbow(length(p1))) ※ 색 지정 가능
> pie(p1,radius=1,init.angle=90,col=rainbow(length(p1)),label=c("week 1","week 2","week 3","week 4")) 
  ※라벨 지정가능

> pct=round(p1/sum(p1)*100,1)
> lab=paste(pct,"%") ※paste 함수
> pie(p1,radius=1,init.angle=90,col=rainbow(length(p1)),label=lab)
> legend(1,1.1,c("week 1","week 2","week 3","week 4"),cex=0.5,fill=rainbow(length(p1)))
  ※ 이렇게하면 시각적으로 불편

> pct=round(p1/sum(p1)*100,1)
> lab1=c("week 1","week 2","week 3","week 4")
> lab2=paste(lab1,"\n",pct,"%") \n은 줄바꾸기 
> pie(p1,radius=1,init.angle=90,col=rainbow(length(p1)),label=lab2)

이렇게 해서 한번에 표현

3차원 도넛 형태로 만들 수 있다

install.packages("plotrix")
library(plotrix)

> library(plotrix)
> p1=c(10,20,30,40,50)
> day=round(p1/sum(p1)*100,1)
> label=paste(day,"%")
> pie3D(p1,main="3D Pie",col=rainbow(length(p1)),cex=0.5,labels=label,explode=0.05)
  ※explode는 쪼개지는 정도를 나타낸다.
> legend(0.5,1,c("mon","tue","wed","thu","fri"),cex=0.6,fill=rainbow(length(p1)))

# boxplot() : 상자차트 최대/최소/중앙값을 한눈에 볼 수 있다.

> v1=c(10,12,15,11,20)
> v2=c(5,7,15,8,9)
> v3=c(11,20,15,18,13)
> boxplot(v1,v2,v3)
> boxplot(v1,v2,v3,col=c('blue','yellow','pink'),names=c('blue','yellow','pink'))
> boxplot(v1,v2,v3,col=c('blue','yellow','pink'),names=c('blue','yellow','pink'),horizontal=T)
  ※ horizontal = T는 가로 출력 기능 

히스토그램 - 전처리할때 결측치가 생겼을때, 결측치의 비율을 히스토그램으로 본다. 

#igraph() : 관계도 - 서로 연관이 있는 데이터들을 연결해서 표현해주는 그래프
 주로 sns에서 친구가 어떻게 맺어져 있는지나 특정 기술이 어떤 기술과 관계가 있는지 상사와
 부하등의 관계를 표현할때 많이 쓴다. 

install.packages("igraph")
library(igraph)

> g1=graph(c(1,2,2,3,2,4,1,4,5,5,3,6),directed = T)
> plot(g1)
> g1
IGRAPH caaf947 D--- 6 6 -- 
+ edges from caaf947:
[1] 1->2 2->3 2->4 1->4 5->5 3->6

관계가 나온다. 결국 2개씩 묶인 것이다. 

> g=graph.data.frame(emp,directed=F)
> plot(g, layout=layout.fruchterman.reingold,vertex.size=8,edge.arrow.size=0.5,vertex.label=NA)
무방향에 이름이 안나오게 하는 방법

> savePlot("network_3.png",type="png")
Error in savePlot("network_3.png", type = "png") : 
  'windows'장치들로부터 복사만을 할 수 있습니다
dev.new()를 사용한다. 

emp=data.frame(이름=name,상사이름=pemp)
emp
dev.new()
g=graph.data.frame(emp,directed=F)
plot(g, layout=layout.fruchterman.reingold,vertex.size=8,edge.arrow.size=0.5,vertex.label=NA)

> savePlot("network_3.png",type="png")
> savePlot("network_3.jpg",type="jpg")

install.packages("devtools")
library(devtools)


install.packages("devtools")
library(devtools)
install_github("christophergandrud/d3Network")
install.packages("RCurl")
library(RCurl)
library(d3Network)


> pemp=c('홍길동 대표','홍길동 대표','일지매 부장','김유신 과장','김유신 과장','홍길동 대표','이순신 부장','유관순 과장,','홍길동 대표','강감찬 부장','광개토 과장')
> name=c('홍길동 대표','일지매 부장','김유신 과장','손흥민 대리','노홍철 대리','이순신 부장','유관순 과장','신사임당 대리','강감찬 부장','광개토 과장','정몽주 대리')
> emp=data.frame(이름=name,상사이름=pemp)
> d3SimpleNetwork(emp,width=600,height=600,file="C:\\r_data\\d3.html")

※한글이 깨지는데, 익스플로러 오른쪽 클릭 - 인코딩 - 한글로 바꾸면 한글이 나온다. 
---------------------------------------------------------------------------------------------
4교시

#군집 분석 : 데이터를 여러 집단으로 나눈 후 특성 및 차이를 분석하는 것 

> g=read.csv("군집분석.csv", header=T)
> graph=data.frame(학생=g$학생,교수=g$교수)
> g=graph.data.frame(graph, directed=T)
> g
IGRAPH dfd024d DN-- 526 694 -- 
+ attr: name (v/c)
+ edges from dfd024d (vertex names):
 [1] S272->T1 S282->T1 S336->T1 S344->T1 S242->T2 S315->T2 S55 ->T2 S59 ->T2
 [9] S149->T2 S153->T2 S356->T2 S426->T2 S14 ->T2 S14 ->T2 S55 ->T2 S223->T2
[17] S25 ->T2 S46 ->T2 S153->T2 S169->T2 S363->T2 S423->T2 S224->T3 S135->T3
[25] S261->T3 S294->T4 S145->T4 S145->T4 S162->T4 S162->T4 S166->T4 S196->T4
[33] S196->T4 S219->T4 S237->T4 S237->T4 S242->T4 S294->T4 S294->T4 S315->T4
[41] S352->T4 S352->T4 S14 ->T4 S25 ->T4 S46 ->T4 S55 ->T4 S153->T4 S223->T4
[49] S356->T4 S423->T4 S426->T4 S54 ->T5 S111->T5 S217->T5 S428->T5 S93 ->T6
[57] S23 ->T6 S46 ->T6 S106->T6 S122->T6 S181->T6 S264->T6 S321->T6 S383->T6
+ ... omitted several edges
> plot(g,layout=layout.fruchterman.reingold,vertex.size=2,edge.arrow.size=0.5,vertex.color='green',vertex.laber=NA)
> plot(g,layout=layout.kamada.kawai,vertex.size=2,edge.arrow.size=0.2,vertex.color='green',vertex.laber=NA)


> gubun1=V(g)$name
> gubun1
  [1] "S272" "S282" "S336" "S344" "S242" "S315" "S55"  "S59"  "S149" "S153"
 [11] "S356" "S426" "S14"  "S223" "S25"  "S46"  "S169" "S363" "S423" "S224"
 [21] "S135" "S261" "S294" "S145" "S162" "S166" "S196" "S219" "S237" "S352"
 [31] "S54"  "S111" "S217" "S428" "S93"  "S23"  "S106" "S122" "S181" "S264"
 [41] "S321" "S383" "S49"  "S185" "S230" "S410" "S240" "S188" "S228" "S258"
 [51] "S26"  "S66"  "S109" "S113" "S182" "S208" "S235" "S251" "S381" "S334"
 [61] "S3"   "S21"  "S36"  "S40"  "S52"  "S105" "S119" "S129" "S176" "S275"
 [71] "S276" "S277" "S287" "S300" "S311" "S314" "S341" "S345" "S407" "S414"
 [81] "S10"  "S61"  "S67"  "S78"  "S89"  "S152" "S165" "S198" "S203" "S225"
 [91] "S231" "S304" "S354" "S364" "S380" "S385" "S404" "S411" "S42"  "S243"
[101] "S170" "S270" "S350" "S32"  "S63"  "S97"  "S151" "S213" "S38"  "S180"
[111] "S254" "S269" "S29"  "S92"  "S160" "S192" "S214" "S222" "S313" "S319"
[121] "S432" "S6"   "S132" "S179" "S204" "S360" "S406" "S33"  "S104" "S187"
[131] "S197" "S138" "S114" "S139" "S163" "S210" "S81"  "S60"  "S80"  "S286"
[141] "S221" "S257" "S265" "S326" "S5"   "S346" "S79"  "S368" "S99"  "S320"
[151] "S359" "S88"  "S125" "S247" "S339" "S31"  "S148" "S164" "S195" "S366"
[161] "S178" "S220" "S349" "S51"  "S115" "S159" "S342" "S372" "S419" "S108"
[171] "S390" "S69"  "S71"  "S316" "S409" "S43"  "S146" "S133" "S7"   "S39" 
[181] "S45"  "S190" "S209" "S102" "S327" "S65"  "S68"  "S100" "S101" "S128"
[191] "S147" "S241" "S249" "S353" "S387" "S389" "S18"  "S57"  "S123" "S283"
[201] "S174" "S335" "S34"  "S260" "S297" "S361" "S386" "S412" "S427" "S30" 
[211] "S62"  "S77"  "S87"  "S126" "S168" "S186" "S205" "S253" "S279" "S288"
[221] "S290" "S291" "S292" "S417" "S13"  "S48"  "S95"  "S211" "S216" "S245"
[231] "S317" "S191" "S302" "S19"  "S118" "S236" "S250" "S289" "S329" "S374"
[241] "S402" "S121" "S172" "S239" "S161" "S266" "S325" "S370" "S28"  "S41" 
[251] "S70"  "S85"  "S120" "S141" "S156" "S157" "S158" "S232" "S259" "S267"
[261] "S295" "S305" "S318" "S355" "S357" "S376" "S384" "S429" "S430" "S369"
[271] "S116" "S167" "S194" "S420" "S218" "S255" "S306" "S328" "S256" "S284"
[281] "S337" "S131" "S332" "S351" "S74"  "S285" "S303" "S273" "S127" "S58" 
[291] "S155" "S177" "S263" "S17"  "S44"  "S90"  "S200" "S202" "S299" "S400"
[301] "S403" "S94"  "S382" "S398" "S4"   "S76"  "S252" "S392" "S144" "S388"
[311] "S396" "S112" "S307" "S331" "S431" "S16"  "S73"  "S324" "S416" "S37" 
[321] "S173" "S226" "S248" "S298" "S309" "S379" "S421" "S117" "S140" "S212"
[331] "S238" "S271" "S274" "S358" "S393" "S1"   "S11"  "S15"  "S20"  "S56" 
[341] "S86"  "S189" "S206" "S347" "S399" "S22"  "S134" "S293" "S371" "S322"
[351] "S2"   "S53"  "S64"  "S91"  "S338" "S362" "S377" "S9"   "S35"  "S72" 
[361] "S84"  "S96"  "S110" "S171" "S175" "S193" "S201" "S207" "S215" "S227"
[371] "S229" "S234" "S246" "S262" "S268" "S308" "S348" "S391" "S408" "S27" 
[381] "S47"  "S107" "S154" "S244" "S323" "S367" "S395" "S405" "S425" "S124"
[391] "S233" "S82"  "S343" "S8"   "S75"  "S199" "S296" "S397" "S137" "S310"
[401] "S130" "S136" "S142" "S301" "S401" "S415" "S365" "S413" "S98"  "S150"
[411] "S312" "S24"  "S281" "S50"  "S375" "S422" "S83"  "S184" "S280" "S333"
[421] "S378" "S418" "S278" "S373" "S12"  "S103" "S330" "S340" "S394" "S143"
[431] "S424" "S183" "T1"   "T2"   "T3"   "T4"   "T5"   "T6"   "T7"   "T8"  
[441] "T9"   "T10"  "T11"  "T12"  "T13"  "T14"  "T15"  "T16"  "T17"  "T18" 
[451] "T19"  "T20"  "T21"  "T22"  "T23"  "T24"  "T25"  "T26"  "T27"  "T28" 
[461] "T29"  "T30"  "T31"  "T32"  "T33"  "T34"  "T35"  "T36"  "T37"  "T38" 
[471] "T39"  "T40"  "T41"  "T42"  "T43"  "T44"  "T45"  "T46"  "T47"  "T48" 
[481] "T49"  "T50"  "T51"  "T52"  "T53"  "T54"  "T55"  "T56"  "T57"  "T58" 
[491] "T59"  "T60"  "T61"  "T62"  "T63"  "T64"  "T65"  "T66"  "T67"  "T68" 
[501] "T69"  "T70"  "T71"  "T72"  "T73"  "T74"  "T75"  "T76"  "T77"  "T78" 
[511] "T79"  "T80"  "T81"  "T82"  "T83"  "T84"  "T85"  "T86"  "T87"  "T88" 
[521] "T89"  "T90"  "T91"  "T92"  "T93"  "T94" 
> gubun=str_sub(gubun1,start=1,end=1)
> gubun
  [1] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
 [18] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
 [35] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
 [52] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
 [69] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
 [86] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[103] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[120] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[137] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[154] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[171] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[188] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[205] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[222] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[239] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[256] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[273] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[290] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[307] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[324] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[341] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[358] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[375] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[392] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[409] "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S" "S"
[426] "S" "S" "S" "S" "S" "S" "S" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T"
[443] "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T"
[460] "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T"
[477] "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T"
[494] "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T"
[511] "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T" "T"


#학생일 경우 컬러를 red로 하고 교수님일 경우 green으로 출력하는 조건문 코드 만들기 

colors=c()
for (i in 1:length(gubun)){
  if (gubun[i]=="S") {
     colors[i]='red'
    } else {
       colors[i]='green'
    } 
}

plot(g,layout=layout.fruchterman.reingold,vertex.size=2,edge.arrow.size=0.2,vertex.color=colors,vertex.laber=NA)

#학생일 경우 점의 크기를 2로, 교수님일 경우 점의 크기를 6으로 하는 코드 만들기 

size_font=c()
for (i in 1:length(gubun)){
  if (gubun[i]=="S") {
    size_font[i]=2
  } else {
    size_font[i]=6
  } 
}

plot(g,layout=layout.fruchterman.reingold,vertex.size=size_font,edge.arrow.size=0,vertex.color=colors,vertex.label=NA)

이렇게 했을때 어떤 교수가 있기 있는지 확인할 수 있다.

#교수님일 경우 모양을 square로 하고 학생일 경우 circle로 하는 코드

vertex_shapes1=c()
for (i in 1:length(gubun)){
  if (gubun[i]=="S") {
    vertex_shapes1[i]="circle"
  } else {
    vertex_shapes1[i]="square"
  } 
}
dev.new()
> plot(g,layout=layout.fruchterman.reingold,vertex.size=size_font,edge.arrow.size=0,vertex.color=colors,vertex.label=NA,vertex.shape=vertex_shapes1)
> savePlot("군집_색상크기조절_5.jpg",type="jpg")

#treemap() : 트리맵 - 
 
> total=read.csv("학생시험결과_전체점수.csv")
> total
   순위   이름 조 점수 X100점..환산점수 성취율
1     1 김태함  1   48            100.0   1.00
2     2 강요셉  2   46             95.8   0.96
3     3 구선모  1   45             93.8   0.94
4     4 권혁진  3   43             89.6   0.90
5     5 박지영  1   41             85.4   0.85
6     6 김선호  1   41             85.4   0.85
7     7 김영빈  4   41             85.4   0.85
8     8 김용하  3   40             83.3   0.83
9     9 김지은  1   39             81.3   0.81
10   10 김태한  1   39             81.3   0.81
11   11 강경림  2   39             81.3   0.81
12   12 김효섭  2   39             81.3   0.81
13   13 문연주  3   39             81.3   0.81
14   14 김명록  1   38             79.2   0.79
15   15 이경용  4   48            100.0   1.00
16   16 이규화  4   37             77.1   0.77
17   17 이성용  2   36             75.0   0.75
18   18 이유나  2   34             70.8   0.71
19   19 이준원  3   34             70.8   0.71
20   20 이지선  4   33             68.8   0.69
21   21 임경희  2   31             64.6   0.65
22   22 전성운  2   30             62.5   0.63
23   23 조수진  4   30             62.5   0.63
24   24 최경문  4   27             56.3   0.56
25   25 최동인  3   24             50.0   0.50
26   26 최주연  3   23             47.9   0.48
27   27 하혜진  4   23             47.9   0.48
28   28 황영규  3   13             27.1   0.27



total=read.csv("학생시험결과_전체점수.csv")
total
install.packages("treemap")
library(treemap)
treemap(total,vSize="점수",index=c("점수","이름"))

treemap(total,vSize="점수",index=c("점수","조","이름"))


