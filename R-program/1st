"""
#설치
 1) R다운로드 - R플랫폼 사용
     https://www.r-project.org
     download r 클릭 
     korea에서 아무거나 클릭 
     download for windows(바로 실행하지 말고, 저장을 따로 하고 실행)
 
 2) R studio 다운로드
     https://rstudio.com/products/rstudio/download/
     download - free
     

 3) JAVA JDK 다운로드
     https://www.oracle.com/technetwork/java/javase/downloads/index.html
     java se - java se 8 - javase 8u231 - accept license 체크 하고 64비트를 다운로드 
     - 오라클 로그인 뜬다. 오라클 아이디 만들어놓는 것이 좋다. 

 
c드라이브에 r_data 폴더를 생성후(바로 폴더 만들기) 다운로드 받은 data파일을 압축풀어서 폴더를 제외한 파일만 복사 붙여넣기

data 파일을 쓰기 위한 경로 설정을 C://r_data 로할 것 

인터프리터 - 명령을 한줄 한줄 실행해주는 것. 
R이 인터프리터언어이다.
한줄 단위로 실행하기 때문에 에러를 바로 알 수 있다.
반복문이나 함수를 사용할때 불편하다.

스크립트까지 같이 컴파일할 수 있는 환경을 마련해주는 것이 R studio


#R studio 설정

file - new file - R script로 파일을 만들면, 
인터프리터로 사용할수도 있고, 컴파일러로도 사용할수 있다. 

tools - global option - code 
editing - soft-wrap R source files 체크 
saving - default text encoding UTF-8로 변경 

appearance - font size : 16 정도 

#jdk 확인

c드라이브 - program files - java - jdk 231 (지금깐거)- bin - 주소창 클릭
경로 복사 
C:\Program Files\Java\jdk1.8.0_231\bin 

내pc - 오른쪽 클릭 - 속성 - 고급시스템설정 - 환경변수 - 시스템변수에서 path 더블 클릭
- 새로만들기 - 주소 붙여 넣기 - 확인 

※path 설정 제대로 됏는지 확인
cmd - javac 엔터 아래 화면이 나오면 정상 

Usage: javac <options> <source files>
where possible options include:
  -g                         Generate all debugging info
  -g:none                    Generate no debugging info
  -g:{lines,vars,source}     Generate only some debugging info
  -nowarn                    Generate no warnings
  -verbose                   Output messages about what the compiler is doing
  -deprecation               Output source locations where deprecated APIs are used
  -classpath <path>          Specify where to find user class files and annotation processors
  -cp <path>                 Specify where to find user class files and annotation processors
  -sourcepath <path>         Specify where to find input source files
  -bootclasspath <path>      Override location of bootstrap class files
  -extdirs <dirs>            Override location of installed extensions
  -endorseddirs <dirs>       Override location of endorsed standards path
  -proc:{none,only}          Control whether annotation processing and/or compilation is done.
  -processor <class1>[,<class2>,<class3>...] Names of the annotation processors to run; bypasses default discovery process
  -processorpath <path>      Specify where to find annotation processors
  -parameters                Generate metadata for reflection on method parameters
  -d <directory>             Specify where to place generated class files
  -s <directory>             Specify where to place generated source files
  -h <directory>             Specify where to place generated native header files
  -implicit:{none,class}     Specify whether or not to generate class files for implicitly referenced files
  -encoding <encoding>       Specify character encoding used by source files
  -source <release>          Provide source compatibility with specified release
  -target <release>          Generate class files for specific VM version
  -profile <profile>         Check that API used is available in the specified profile
  -version                   Version information
  -help                      Print a synopsis of standard options
  -Akey[=value]              Options to pass to annotation processors
  -X                         Print a synopsis of nonstandard options
  -J<flag>                   Pass <flag> directly to the runtime system
  -Werror                    Terminate compilation if warnings occur
  @<filename>                Read options and filenames from file


왼쪽 상단 - 코드를 넣는 작업영역
왼쪽 하단 - 결과를 보여줌 (텍스트적인 콘솔)
오른쪽 하단 flot(차트/워드클라우드) / viewer / packages(기본적으로 제공되는 패키지가 나온다.) 

※R프로그래밍 팁1
실행을 했는데, r 리세션 다시 리스타트 메세지 뜨면 절대 ok누르지 말것, no 누른다음에 다시 돌려본다. 
안돌아가면 다시 한번더, 그때 리세션 눌러야한다. 아니면 그 동안 부텨놓은 패키지가 다 날아간다. 


오른쪽 상단 - 그동안 사용했던 명령어에 대한 히스토리/환경이 나타난다. 

※R프로그래밍 팁2
계속 데이터를 가공해서 변수에 담아놓는다.
작업을 하고 난 뒤 수정본이 여러개가 있을 수 있다. update되는 데이터가 있는데
따로 저장을 해놓는 연습을 해놔야한다. R에서는 꼭해야한다. 
안 그러면 마지막 데이터가 변수가 된다. 벡업 데이터를 찾을 수 가 없다. 
그렇게되면 똑같은 작업을 계속해야한다.

A1 / A2 / A3 이렇게 변수명을 다르게해서 백업데이터를 저장해놓는 연습을 해야한다. 
A3가 에러나면 A2를 불러오면 된다. 

History 탭에서 To source를 하면 데이터를 불러온다. 
ctrl 클릭하면 각각 선택
shiht 클릭하면 연속 선택 후 to source하면 명령어 치는 곳으로 함수가 간다. 

명령어 함수를 쉽게 외우는 방법은? - 단어 그대로 원초적인 단어 뜻 그대로 해석을 한다.
setwd -> set 설정하다 wd working directory를 

crtl + enter를 눌러야 명령 실행

#함수 - setwd
setwd("c:\\r_data") : 데이터를 불러올 디렉토리 설정 

#함수 - getwd
wd가 설정된 주소를 가져온다. 
getwd()
결과값 : [1] "c:/r_data"

------------------------------------------------------------------------------------------------------
2교시

※함수를 공부하는 좋은 방법은 오른쪽 하단에서 help탭에서 함수를 찾아보고 읽어보기

#함수-print : 결과를 나타내는 함수 - 화면에 출력
print(1+2)
결과값 : 3

print('a')
결과값 : "a" 문자 출력
print(pi)
결과값 : [1] 3.141593

print(pi, digit=3)
결과값 : [1] 3.14

print(1,2)
결과값 : 1  ※ 숫자는 여러개가 나오면 앞에 숫자만 출력해준다. 

print('a','b')
결과값 :
Error in print.default("a", "b") : invalid 'digits' argument
In addition: Warning message:
In print.default("a", "b") : NAs introduced by coercion

#함수-cat

cat(1+2)
결과값 : 3
cat(1,2)
결과값 : 1 2
※ 여러개의 숫자와 문자를 출력가능

print(1,'a')
cat(1,'a')
프린트는 에러나지만, cat은 출력된다. 

cat(1,':','a','\n',2,':','b');
결과값 : 
1 : a 
 2 : b
\n은 줄바꾸기 

> 1;2;3
[1] 1
[1] 2
[1] 3

세미콜론을 기준으로 순서대로 명령이 실행된다. 

> 1+2; 2*3; 2/3
[1] 3
[1] 6
[1] 0.6666667

정수 int
실수 float / double

R은 숫자는 numeric으로 본다.

#자료형
> class(1)
[1] "numeric"

> class('a')
[1] "character"


> class(TRUE)
[1] "logical"

#산술연산자
R에서 나누기는 3개가 있다. 
몫을 구하는 나누기(%/%) / 나머지를 구하는 나누기(%%) / 정확한 값을 구하는 나누기 (/)

> 5/2;5%%2;5%/%2
[1] 2.5
[1] 1
[1] 2

> 5%2 %만은 없다. 
Error: unexpected input in "5%2"

캐럿 - 제곱승은 2가지 ^ 와 **
> 3^2
[1] 9
> 3**2
[1] 9

연산자 우선순위 - 곱하기/나누기 먼저, 괄호 안 먼저 

> 1000
[1] 1000
> 10000
[1] 10000
> 100000
[1] 1e+05

10만 이상부터는 지수형태로 표시가 된다

> 1e+07;1e7
[1] 1e+07
[1] 1e+07

> 3e-1;3e-2
[1] 0.3
[1] 0.03

> 1+2
[1] 3
> 'a'+'b'
Error in "a" + "b" : non-numeric argument to binary operator
> '1'+'2'
Error in "1" + "2" : non-numeric argument to binary operator

숫자와 숫자만 연산이 되고, 문자와 문자는 연산이 안된다. 


따옴표가 붙으면 문자,그렇지 않으면 숫자 아니면 그외 타입으로 인식

> 1a
Error: unexpected symbol in "1a"


#주석처리 : #

#함수-as.자료형 : 자료형 변환 함수 (as : ~처럼/~로서)
> class('1')
[1] "character"
> as.numeric('1')+as.numeric('2')
[1] 3

> as.character(1)
[1] "1"

#변수지정
> first = 1
> first
[1] 1

#진리값 / 논리값

3&0 엠퍼샌드 -> and 연산 (곱하기)

> 3&0  3*0 = 0
[1] FALSE

> -2&3
[1] TRUE

0을 제외한 모든 숫자는 TRUE

| or 더하기 0+0은 0
모두 거짓인 경우에만 FLASE

> 0|0
[1] FALSE
> 0|3
[1] TRUE


! : 아니다. not 
> !0
[1] TRUE
> !-2
[1] FALSE

#NA와 NULL 
※ 매우 중요 - NA : (not available) - 잘못된 값이 들어온경우
   데이터 전처리할 때 NA와 NULL값이 들어온다. 
   NA값은 결측치와 이상치를 구분해줘야한다.
   ex) 주민등록번호를 받고 성별판단할때, 1,3은 남자 / 2,4는 여자인데, 9가 들어왔을때?
       그럼 NA, 그런데 아무 숫자도 없다?
   NULL : 값이 없는 경우 

> cat(1, NA, 2)
1 NA 2
> cat(1,NULL,2)
1 2

NA는 표시되지만 NULL은 걸러진다. 


> sum(1,2,3);sum(1,NA,3)
[1] 6
[1] NA

NA가 sum에 있으면 전체를 NA로 만든다. 따라서 데이터처리할때 NA를 조심해야한다.

> sum(1,NULL,3)
[1] 4

NULL이 있으면 그거 생략하고 계산한다. 


> sum(1,3,4,NA, na.rm=T)
[1] 8

rm은 remove의 약어, na.rm=T는 NA를 제거한다를 설정


#factor 형 자료 : 여러번 중복되어 나오는 데이터들을 각 값으로 모아서 대표값을 출력
  - 구분되는 대표값 

setwd("c:\\r_data")

#변수지정 
txt =
txt <- 

※ csv data 모든 데이터를 쉼표로 구분한 데이터 

번호,이름,가격
1,사과,1000
2,배,2000
3,귤,3000

이렇게 생겼으면 csv file 

> setwd("c:\\r_data")
> txt=read.csv("factor_test.txt")
> txt
   no       name blood sex location
1   1     서진수     O  남     서울
2   2     홍길동     A  남     부산
3   3     유관순     O  여     부산
4   4     전우치     B  남     전남
5   5     강감찬    AB  남     강원
6   6   신사임당     A  여     강원
7   7   퇴계이황     B  남     충청
8   8   율곡이이     O  남     전북
9   9 근초고대왕     B  남     제주
10 10   뺑덕어멈     B  여     서울


f1<-factor(txt$컬럼명) - 여기서는 no / name blood sex location 중 하나 

txt에서 blood의 대표값을 f1에 넣어줘라 


> f1<-factor(txt$blood)
> f1
 [1] O  A  O  B  AB A  B  O  B  B 
Levels: A AB B O


#함수-summary
> summary(f1)
 A AB  B  O 
 2  1  4  3 

> f2<-factor(txt$sex) ※txt라는 변수에서 sex라는 컬럼을 요약해서 출력해줘 
> f2
 [1] 남 남 여 남 남 여 남 남 남 여
Levels: 남 여
> summary(f2)
남 여 
 7  3 


------------------------------------------------------------------------------------------------------
3교시
#날짜와 시간

> Sys.Date()
[1] "2019-10-19"
> Sys.time()
[1] "2019-10-19 17:00:23 KST"
> date()
[1] "Sat Oct 19 17:00:38 2019" ※미국식

> '2019-10-19'
[1] "2019-10-19" - 얘는 그냥 문자 
> as.Date('2019-10-19')
[1] "2019-10-19"
> as.Date('2019/10/19')
[1] "2019-10-19"

> as.Date('19-10-2019')
[1] "0019-10-20"        -> 연도 / 월 /  일 순서로 인식함 

> as.Date('19-10-2019',format="%d-%m-%Y")
[1] "2019-10-19"                          -> format으로 정해주면 그 순서로 날싸 인식

> as.Date('19-10-2019',format="%d-%m-%y")
[1] "2020-10-19"

%Y는 년도를 4자리로 인식
%y는 년도를 2자리로 인식 2019에서 20을 년도로 인식 

> as.Date('19-10-2019',format="%d-%b-%y")
[1] NA

> format(Sys.Date(),format="%B-%d %Y") B는 한글로 월을 나타냄
[1] "10월-19 2019"

> as.Date("19102019",format="%d %m %Y")
[1] "2019-10-19"

기준 일자를 주고 몇일 후인지 
> as.Date(100,origin="2019-10-19")
[1] "2020-01-27" 
오늘로 부터 100일 후 

> as.Date(-100,origin="2019-10-19")
[1] "2019-07-11" 오늘로부터 100일 전 

> as.Date("2019-10-19")-as.Date("2019-07-11")
Time difference of 100 days

> as.Date("2019-10-19") + 5
[1] "2019-10-24"            5일뒤의 날짜 계산 

#POSIXlt와 POSIXct
※R에서 날짜를 언급할때는 POSIXlt와 POSIXct 두가지 클래스를 많이 이야기한다. 
※POSIXlt는 날짜를 년,월,일로 표시하는 리스트형 클래스이고,
  POSIXct는 날짜를 연속적인 데이터로 인식해서 1970년을 기준으로 초단위로 계산을 한다. 
  회귀분석등을 할때는 주로 POSIXct를 사용한다. 연속적인 시간이 필요하므로 


> as.Date("2019-10-19 20:00:00")-as.Date("2019-10-19 19:30:30")
Time difference of 0 days

lt는 시간계산이 안된다. 

> as.POSIXct("2019-10-19 20:00:00")-as.POSIXct("2019-10-19 19:30:30")
Time difference of 29.5 mins
※ 나라간 시차를 계산해야한다. time stamp가 굉장히 중요하다. 


#install.packages("lubridate")
ackage ‘glue’ successfully unpacked and MD5 sums checked
package ‘magrittr’ successfully unpacked and MD5 sums checked
package ‘stringi’ successfully unpacked and MD5 sums checked
package ‘stringr’ successfully unpacked and MD5 sums checked
package ‘Rcpp’ successfully unpacked and MD5 sums checked
package ‘lubridate’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\user\AppData\Local\Temp\RtmpWEhWNT\downloaded_packages


------------------------------------------------------------------------------------------------------
4교시


라이브러리 설치후 불러와야한다. 
#라이브러리 부르기

> library(lubridate)

다음의 패키지를 부착합니다: ‘lubridate’

The following object is masked from ‘package:base’:

    date

> date=now()
> date
[1] "2019-10-19 17:50:17 KST"
> year(date)
[1] 2019
> month(date)
[1] 10
> month(date,label=T)
[1] 10
Levels: 1 < 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < 11 < 12
> month(date,label=F)
[1] 10

> wday(date,label=F)
[1] 7
> wday(date,label=T)
[1] 토
Levels: 일 < 월 < 화 < 수 < 목 < 금 < 토

> date2=date-days(2)
> date2
[1] "2019-10-17 17:50:17 KST"

> month(date)=2 ※date의 month를 2로 설정
> date
[1] "2019-02-19 17:50:17 KST"

이렇게되면 date는 백업데이터가 없이 최종 걸로 저장이 된다. 


> date+years(1)
[1] "2020-02-19 17:50:17 KST"

> date
[1] "2019-02-19 17:50:17 KST"

다행이도 저장을 안해서 살아있다. 

> date3=date+minutes(1)
> date3
[1] "2019-02-19 17:51:17 KST"

> date4=date+months(3)
> date4
[1] "2019-05-19 17:50:17 KST"

> date5=hm("22:30")
> date5
[1] "22H 30M 0S"

> date6=hms("22:30:19")
> date6
[1] "22H 30M 19S"


#함수- seq()

> seq(as.Date("2019-10-01"),as.Date("2019-10-31"),1)
 [1] "2019-10-01" "2019-10-02" "2019-10-03" "2019-10-04" "2019-10-05"
 [6] "2019-10-06" "2019-10-07" "2019-10-08" "2019-10-09" "2019-10-10"
[11] "2019-10-11" "2019-10-12" "2019-10-13" "2019-10-14" "2019-10-15"
[16] "2019-10-16" "2019-10-17" "2019-10-18" "2019-10-19" "2019-10-20"
[21] "2019-10-21" "2019-10-22" "2019-10-23" "2019-10-24" "2019-10-25"
[26] "2019-10-26" "2019-10-27" "2019-10-28" "2019-10-29" "2019-10-30"
[31] "2019-10-31"

> seq(as.Date("2019/10/01",format="%Y/%m/%d"),as.Date("2019/10/31",format="%Y/%m/%d"),1)
 [1] "2019-10-01" "2019-10-02" "2019-10-03" "2019-10-04" "2019-10-05"
 [6] "2019-10-06" "2019-10-07" "2019-10-08" "2019-10-09" "2019-10-10"
[11] "2019-10-11" "2019-10-12" "2019-10-13" "2019-10-14" "2019-10-15"
[16] "2019-10-16" "2019-10-17" "2019-10-18" "2019-10-19" "2019-10-20"
[21] "2019-10-21" "2019-10-22" "2019-10-23" "2019-10-24" "2019-10-25"
[26] "2019-10-26" "2019-10-27" "2019-10-28" "2019-10-29" "2019-10-30"
[31] "2019-10-31"


> seq(as.Date("2019/10/01","%Y/%m/%d"),as.Date("2019/10/31","%Y/%m/%d"),1) ※format이라는 글자가 빠져도 된다. 
 [1] "2019-10-01" "2019-10-02" "2019-10-03" "2019-10-04" "2019-10-05"
 [6] "2019-10-06" "2019-10-07" "2019-10-08" "2019-10-09" "2019-10-10"
[11] "2019-10-11" "2019-10-12" "2019-10-13" "2019-10-14" "2019-10-15"
[16] "2019-10-16" "2019-10-17" "2019-10-18" "2019-10-19" "2019-10-20"
[21] "2019-10-21" "2019-10-22" "2019-10-23" "2019-10-24" "2019-10-25"
[26] "2019-10-26" "2019-10-27" "2019-10-28" "2019-10-29" "2019-10-30"
[31] "2019-10-31"

하루씩 증가 

> seq(month(as.Date("2019/01/01","%Y/%m/%d")),month(as.Date("2019/12/31","%Y/%m/%d")),1)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

한달씩 증가 -> 모를땐 help에 함수 어떻게 쓰는지 확인 

> seq(as.Date("2019/01/01","%Y/%m/%d"),as.Date("2019/12/31","%Y/%m/%d"),'month')
 [1] "2019-01-01" "2019-02-01" "2019-03-01" "2019-04-01" "2019-05-01"
 [6] "2019-06-01" "2019-07-01" "2019-08-01" "2019-09-01" "2019-10-01"
[11] "2019-11-01" "2019-12-01"

#lubridate 패키지를 활용한 타임존 관리 r을 활용한 데이터 전처리와 활용 예 문제

나는 서울에서 프랑스 파리로 건너 왔다. 매니저가 2021년 1월 1일 오후 1시에 전화를 하겠다고 한다.
나는 당연히 프랑스 파리시간이라고 생각했다.(t0)  하지만 매니저는 서울 시간이라고 한다.(t1)
이 시간을 파리 시간으로 바꾸면 오전 5시이다.(t2) 나는 도저히 오전 5시에는 일어나지 못한다.
그래서 7시간만 늦추자고 했다.(t3) 이 시간은 한국 서울 시간으로 오후 8시(t4)가 될 것이다.
적절한 시간이다. 


[1] "2021-01-01 13:00:00 CET"
> t0=as.POSIXct("2021-01-01 13:00:00", tz="Europe/Paris")
> t1=t0
> t1
[1] "2021-01-01 13:00:00 CET"
> tz(t1) ="Asia/Seoul"
> t1
[1] "2021-01-01 13:00:00 KST"

> t2=with_tz(t1,tzone="Europe/Paris")
> t2
[1] "2021-01-01 05:00:00 CET"
> t3=t2
> hour(t3)=hour(t3)+7
> t3
[1] "2021-01-01 12:00:00 CET"

> t4=with_tz(t3, tzone="Asia/Seoul")
> t4
[1] "2021-01-01 20:00:00 KST"

"""
