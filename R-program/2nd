#191020
------------------------------------------------------------------------------
1교시

setwd("C:/r_data")
getwd()
해놓고 시작 


#변수 

var1="aaa"
위 변수를 오른쪽상단 환경에서 보면
values 로 해서

> var1="aaa"
var1이라는 변수에 "aaa" 문자가 지정된 걸 확인할수 있다.  
> var2=1234
var2라는 변수에 1234 숫자가 지정된 걸 확인할 수 있다.

> var3=c("a","b","c")  ※ c()는 컴바인 함수 - 
컴바인 함수, 환경에
var3에 chr[1:3] "a" "b" "c" 첫번째 행에 문자열 3개가 들어가 있다.


> var4=c(1,2,3,4)
> var4
[1] 1 2 3 4
환경에서 var4변수에 num[1:4] 1 2 3 4 숫자 4개가 들어 있다. 

> 111->a->b->c
> a
[1] 111
> b
[1] 111
> c
[1] 111
연속할당, 111을 a/b/c에 할당 
※왼쪽에서 오른쪽으로 값을 입력하는 것은 추천하지 않는다. 
기본적으로 프로그래밍언어에서는 대입연산자 기준으로 오른쪽으로 값,수식,변수,상수
왼쪽에는 변수,상수
※대입연산자 = , <-


> a<-b<-c<-222
> a
[1] 222
> b
[1] 222
> c
[1] 222

이렇게 연속적으로 할당 가능

> str1="Hi 안녕"
> str1
[1] "Hi 안녕" 
문자열 저장도 가능 

컴바인 함수를 이용하여 문자와 숫자를 같이 저장 가능
> ch1=c(1,2,3,"a","b")
> ch1
[1] "1" "2" "3" "a" "b"

> class(ch1)
[1] "character"

하지만 자료형은 문자형이다.

팩터와 문자가 만나면? factor형이다. 

#변수 설정시 주의사항
1) 대소문자 구분필요
2) 영어,숫자,모두 쓸수 있지만 시작은 반드시 문자
3) 예약어 사용 불가 
  ※예약어 - 프로그래밍을 하기 위해 미리 정해져 있는 명령어 EX) NA, NULL, FUNCTION,IF,ELSE,TRUE,FALSE 등

> num1=1
> num2=2
> num1+num2
[1] 3

#변수에 연속적인 값 대입 (seq함수)

> seq1=1:5
> seq1
[1] 1 2 3 4 5  ※자료형은 num이 아닌 int?

> seq2='a':'b'
Error in "a":"b" : NA/NaN argument
In addition: Warning messages:
1: NAs introduced by coercion 
2: NAs introduced by coercion 

문자열은 시퀀스가 안된다. 

> date1=seq(as.Date("2019-10-01"), as.Date("2019-10-31"),1)
> date1
 [1] "2019-10-01" "2019-10-02" "2019-10-03" "2019-10-04" "2019-10-05"
 [6] "2019-10-06" "2019-10-07" "2019-10-08" "2019-10-09" "2019-10-10"
[11] "2019-10-11" "2019-10-12" "2019-10-13" "2019-10-14" "2019-10-15"
[16] "2019-10-16" "2019-10-17" "2019-10-18" "2019-10-19" "2019-10-20"
[21] "2019-10-21" "2019-10-22" "2019-10-23" "2019-10-24" "2019-10-25"
[26] "2019-10-26" "2019-10-27" "2019-10-28" "2019-10-29" "2019-10-30"
[31] "2019-10-31"


 > date2=seq(as.Date("2019-01-01"), as.Date("2019-12-31"),"month")
> date2
 [1] "2019-01-01" "2019-02-01" "2019-03-01" "2019-04-01" "2019-05-01"
 [6] "2019-06-01" "2019-07-01" "2019-08-01" "2019-09-01" "2019-10-01"
[11] "2019-11-01" "2019-12-01"

> date3=seq(as.Date("2019-01-01"), as.Date("2019-12-31"),by="month")
> date3
 [1] "2019-01-01" "2019-02-01" "2019-03-01" "2019-04-01" "2019-05-01"
 [6] "2019-06-01" "2019-07-01" "2019-08-01" "2019-09-01" "2019-10-01"
[11] "2019-11-01" "2019-12-01"
> date4=seq(from=as.Date("2019-01-01"), to=as.Date("2019-12-31"),by="month")
> date4
 [1] "2019-01-01" "2019-02-01" "2019-03-01" "2019-04-01" "2019-05-01"
 [6] "2019-06-01" "2019-07-01" "2019-08-01" "2019-09-01" "2019-10-01"
[11] "2019-11-01" "2019-12-01"

date2,date3,date4는 결과가 같다. by, from to 를 굳이 안써도 

#함수 - objects() : 그동안 사용한 변수들이 조회된다. 
> objects()
 [1] "a"     "b"     "c"     "ch1"   "CH2"   "date1" "date2" "date3" "date4"
[10] "num1"  "num2"  "seq1"  "str1"  "var1"  "var2"  "var3"  "var4" 
> objects(all.names=T)
 [1] ".Random.seed" "a"            "b"            "c"           
 [5] "ch1"          "CH2"          "date1"        "date2"       
 [9] "date3"        "date4"        "num1"         "num2"        
[13] "seq1"         "str1"         "var1"         "var2"        
[17] "var3"         "var4"     

all.names=t로 하면 .(dot)로 표현된 숨겨진 변수도 나타내진다. 


#함수 - rm() : 변수 삭제 
> rm(str1)
> objects()
 [1] "a"     "b"     "c"     "ch1"   "CH2"   "date1" "date2" "date3" "date4"
[10] "num1"  "num2"  "seq1"  "var1"  "var2"  "var3"  "var4" 


> rm(list=ls())
> objects()
character(0)

list=ls()로 하면 다 지워진다. 

#앞으로 할 것 예고 

> x=c(9,15,21,7) #영업1/영업2/영업3/영업4 팀의 실적
> x
[1]  9 15 21  7
> pie(x)

plot에 원형함수가 뜬다. 

> x=c(9,15,21,7) #영업1/영업2/영업3/영업4 팀의 실적
> x
[1]  9 15 21  7
> label=c("영업1","영업2","영업3","영업4")
> pie(x,labels=label,main="팀별 영업 실적")

이것이 시각화이다. 

barplot(x, names.arg=label, main="팀별 영업 실적")
> 

barplot(x, names.arg=label, main="팀별 영업 실적",col=rainbow(length(x)))
> 
색깔별로 그래프를 나타낼수 있다. 

install.packages("wordcloud")
install.packages("RColorBrewer") #패키지 깔기 
library(wordcloud)
library(RColorBrewer) #패키지 붙이기

pal=brewer.pal(8,"Dark2")
> x=c("국민","한국","민족")
> y=c(10,7,4) #x의 빈도수수
> wordcloud(x,y,colors=pal)
> 
plots에서 빈도수를 볼 수 있다. 

#데이터 처리 객체(6가지)
 #동일 데이터 타입 객체 : 스칼라, 벡터, matrix, array
  1) 스칼라 : 단일 데이터 처리  [1]
  2) 벡터 : 1차원 배열 (스칼라를 여러개 합친것) 1행짜리 [1,2,3,4,5]
  3) matrix : 2차원 배열 (벡터를 여러개 합친것) 행과 열이 여러개 [1,2,3,4,5
                                                                  6,7,8,9,10]
  4) array : 3차원 배열 (메트릭스를 여러개 합친것) - 큐브 형태 
             [1,2,3  [7,8,9     [13,14,15
              4,5,6]  10,11,12]  16,17,18]
 
 #다른 데이터 타입 객체 : list, dataframe
  1) list : 벡터와 비슷 (python의 dictionaty - 키와 값 형태로 저장이 된다.) 
  2) dataframe : 컬럼명이 있고, 컬럼 밑에 값들이 존재한다. 엑셀의 표나 db의 TABLE 형태 (db의 컬럼처럼 라벨이 있음)
                 학번, 학과, 성적, ---
                   1, 컴공,   A,
                   2. 기계.   B 

  
#빅데이터를 하려면?
  - 데이터베이스를 하고 나서 넘어와야한다.? - 이데이터들이 어떻게 만들어져서 데이터베이스라는 곳에 저장이 되고,
    어떻게 가져오는지 알고 나서R/python을 해야한다. 
    DB에 대한 개념이 있어야 한다. 

> c(1,2,3,4,5)
[1] 1 2 3 4 5
※벡터 : 1차원 배열
  1) c()함수로 작성
  2) 인덱스는 1부터 시작 (python은 0부터)
  3) 하나의 자료형만 사용
  4) 결측값은 'NA' 사용 - 시험 데이터에서 결측치가 굉장히 많이 나온다. 
  5) null은 어떤 형식도 취하지 않는 특별한 객체다. 

#특정위치 값 제어 

> vec1=1:5
> vec1
[1] 1 2 3 4 5
> vec1[3]
[1] 3

> vec1[-3] ※ 3번째것을 제외하고 가져와라 
[1] 1 2 4 5

> vec1[1:(length(vec1))]  ※길이를 모를때 length 함수를 쓴다. 
[1] 1 2 3 4 5

> vec1[1:(length(vec1)-2)] ※전체길이에서 2를 뺀 숫자를 가져오기 
[1] 1 2 3

> vec1[-1:-3] ※1번부터 3번까지 제외하고 가져와라 
[1] 4 5

> vec1[2]=6 ※ 값 치환 = 2번째것을 6으로 변경 
> vec1
[1] 1 6 3 4 5

> vec2=c(1,7)
> vec2
[1] 1 7

> vec2=c(vec1,7) ※vec1 맨 뒤에 7 추가 
> vec2
[1] 1 6 3 4 5 7

> vec2[9]=9 ※ 9번째에 9번 넣기 7,8번에는 NA가 들어간다. 
                특정위치에 넣을 수 있다. 건너 뛰고 
> vec2
[1]  1  6  3  4  5  7 NA NA  9

> append(vec2,10,after=3)  vec2에 10을 넣을 건데, 3번째 뒤에 넣어라 
 [1]  1  6  3 10  4  5  7 NA NA  9

> append(vec2,c(10,11),after=3) vec2에 10,11을 넣을 건데, 3번째 뒤에 넣어라,
 [1]  1  6  3 10 11  4  5  7 NA NA  9   ※ 4번째가 치환되지 않고 뒤로 밀린다. 
※ 10과 11의 간격이 좁다. 

c(10,11)과 같은 값이 나오나?
> append(vec3,10,after=3)
[1]  1  2  3 10  4  5
> append(vec3,11,after=3)
[1]  1  2  3 11  4  5       -> 앞에 것과 다르다. 왜냐면 변수에 저장이 안되었기 때문에 

> v3=append(vec2,10,after=3)
> v4=append(v3,11,after=3)
> v4
 [1]  1  6  3 11 10  4  5  7 NA NA  9

> v4=append(v4,12,after=0)
> v4
 [1] 12  1  6  3 11 10  4  5  7 NA NA  9

#r에서 1번째가 1인 이유 
1번째가 1인 이유, 1번째에 값을 넣기 위해서! after=0으로 하면 제일 앞에다가 자료를 넣을 수 있다.
R에서 1번째가 1인 이유 

※배열에서 -값이 나올 수 없다? - 자료구조 강의에서 배울 수 있다. 

------------------------------------------------------------------------------
2교시


#벡터 연산 
> c(1,2,3)+c(4,5,6)
[1] 5 7 9
> c(1,2,3,4)+c(5,6,7)
[1]  6  8 10  9
Warning message:
In c(1, 2, 3, 4) + c(5, 6, 7) :
  longer object length is not a multiple of shorter object length
※ 값은 나오지만, 경고 메세지가 뜬다. 길이가 같아야한다고 

> c(1,2,3)+1
[1] 2 3 4


> v1=c(1,2,3)
> v2=c(4,5,'6')
> v1+v2
Error in v1 + v2 : non-numeric argument to binary operator
> v2            ※문자가 포함되어 있기 때문에 전부 문자가 된다. 
[1] "4" "5" "6" 
> union(v1,v2) ※union v1와 v2의 자료형이 다르지만 합쳐야하는 경우 
[1] "1" "2" "3" "4" "5" "6" ※but 다 문자형이 된다. 

> v4=c(1,2,3,4,5)
> v1
[1] 1 2 3
> v1+v4
[1] 2 4 6 5 7
Warning message:
In v1 + v4 :
  longer object length is not a multiple of shorter object length

사이즈가 안 맞으면, 루프를 다시 돌아서 1,2와 4,5가 합쳐진 결과가 나온다. 
두벡터의 길이가 다른 경우 순환 원리가 적용 된다. 

※함수 - setdiff / intersect

> v5=c(3,4,5)
> v1-v5
[1] -2 -2 -2
> setdiff(v1,v5) ※차 집합
[1] 1 2
> intersect(v1,v5) ※ 교집합 
[1] 3

#벡터의 각 컬럼의 이름 정하기 

> fruits=c(10,20,30)
> fruits
[1] 10 20 30         ※10,20,30이 뭘 의미하는지 모른다. 

※ 함수 - names()
> names(fruits)=c("apple","banana","peach")
> fruits
 apple banana  peach 
    10     20     30   


#벡터에 연속적인 데이터할당 : seq(), rep()

> v6=seq(1,5)
> v6
[1] 1 2 3 4 5

> v7=seq(2,-2)
> v7
[1]  2  1  0 -1 -2
> v8=seq(1,10,2)  ※증가 step도 설정 가능 
> v8
[1] 1 3 5 7 9 


v9=rep(1:3,2) ※ 반복함수 1부터 3까지 2번 반복
v9 

> v10=rep(1:3,each=2) 1부터 3까지 각각 2번 반복 
> v10
[1] 1 1 2 2 3 3


> v1
[1] 1 2 3
> length(v1)
[1] 3
> NROW(v1)
[1] 3

> v1
[1] 1 2 3
> length(v1)
[1] 3
> NROW(v1)  ※벡터에서 열의 갯수 구하는 것은 대문자 
[1] 3
> NCOL(v1)
[1] 1

#벡터에 특정 문자의 포함여부
> v7
[1]  2  1  0 -1 -2
> 3%in%v7
[1] FALSE
> 1%in%v7
[1] TRUE

#Matrix 사용
 1) 벡터를 여러개 합친 형태 : 행렬 형태
 2) 모든 컬럼과 행은 데이터형이 동일하다. 
 3) 기본적으로 열로 생성된다. - 
 4) 다른 데이터타입의 데이터를 저장할 경우 데이터프레임을 사용해야한다. 
 5) 

> v1
[1] 1 2 3    - 벡터는 행으로 생성된다. 1행 3열 
> mat1=matrix(c(1,2,3,4))
> mat1
     [,1]
[1,]    1
[2,]    2
[3,]    3
[4,]    4

4행 1열 열로 생성된다.

> mat2=matrix(c(1,2,3,4),nrow=2) ※행의 숫자가 2 
> mat2
     [,1] [,2]
[1,]    1    3
[2,]    2    4

2행 2열로 생성된다. - 열로 생성되기 때문에 숫자가 채워질때 아래로 채워진다.
숫자를 열부터 채운다.

> mat3=matrix(c(1,2,3,4),nrow=2, byrow=T) ※행으로 생성해라 
> mat3
     [,1] [,2]
[1,]    1    2
[2,]    3    4
숫자를 행부터 채운다. 


여기서 [,1]에서 비어있는 값은 모든 모든 행의 1열 
[1,] 모든 열의 1행 
[2,] 모든 열의 2행 
[,2] 2열의 모든 행값 

> mat3[,1]
[1] 1 3
> mat3[1,]
[1] 1 2

> mat4=matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,byrow=T)
> mat4
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6
[3,]    7    8    9

#새로운 행과 열 추가 : 행-row, 열-col rbind / cbind
# 값의 갯수가 작으면 첫번째값부터 반복적으로 입력 

> mat4=rbind(mat4,c(11,12,13))
> mat4
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6
[3,]    7    8    9
[4,]   11   12   13

> mat4=rbind(mat4,c(11,12,13,18))
Warning message:
In rbind(mat4, c(11, 12, 13, 18)) :
  number of columns of result is not a multiple of vector length (arg 2)
> mat4
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6
[3,]    7    8    9
[4,]   11   12   13
[5,]   11   12   13

길이가 다르면 추가는 되지만, 뒤에 숫자는 짤린다. 

> mat4=cbind(mat4,c(11,12,13,18,56))
> mat4
     [,1] [,2] [,3] [,4]
[1,]    1    2    3   11
[2,]    4    5    6   12
[3,]    7    8    9   13
[4,]   11   12   13   18
[5,]   11   12   13   56

> mat4=cbind(mat4,c(11,12,13))
Warning message:
In cbind(mat4, c(11, 12, 13)) :
  number of rows of result is not a multiple of vector length (arg 2)
> mat4
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3   11   11
[2,]    4    5    6   12   12
[3,]    7    8    9   13   13
[4,]   11   12   13   18   11
[5,]   11   12   13   56   12
※ 길이가 짧을 경우 순환한다.


#행과 열의 이름 정하기 - colnames(열이름정하기) / rownames(행이름정하기)
> colnames(mat4)=c("1st","2nd","3rd","4th","5th")
> mat4
     1st 2nd 3rd 4th 5th
[1,]   1   2   3  11  11
[2,]   4   5   6  12  12
[3,]   7   8   9  13  13
[4,]  11  12  13  18  11
[5,]  11  12  13  56  12

Q. cbind할때 이름을 정해서 넣을 수 있는가? - help에 보면 names에 대한 언급이 있긴하다.
   나중에 한번 해보기 

#array
 1) 3차원 배열
 2) matrix를 쌓아놓은 형태 : 큐브 


> arr1=array(c(1:12),dim=c(4,3)) ※dim로 행렬사이즈 정할 수 있다.  4행 3열로 만든다. 
> arr

> arr1
     [,1] [,2] [,3]
[1,]    1    5    9
[2,]    2    6   10
[3,]    3    7   11
[4,]    4    8   12
> arr2=array(c(1:12),dim=c(2,2,3)) 2행 2열이 3개 
> arr2
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 3

     [,1] [,2]
[1,]    9   11
[2,]   10   12


> arr2[1,1,3] 3층의 1행 1열값 불러오기 
[1] 9

행/열/층

#list
 1) 서로 다른 데이터 유형 저장
 2) 벡터와 비슷한 형태로 데이터를 (키,값) 형태로 저장

#list 생성 및 조회 

> list1=list(name="홍길동",addr="서울",tel="010-1234-5678",pay=500) 키/값 형태 c의 스트럭쳐 형태?
> list1
$name
[1] "홍길동"

$addr
[1] "서울"

$tel
[1] "010-1234-5678"

$pay
[1] 500

list1$ 이렇게 치면, 포함된 컬럼들이 다 뜬다. 

> list1$name #키값 호출
[1] "홍길동"

> list1[1:2]
$name
[1] "홍길동"

$addr
[1] "서울"

#list 새로운 요소 추가/삭제 

> list1$birth="2000-10-20"
> list1
$name
[1] "홍길동"

$addr
[1] "서울"

$tel
[1] "010-1234-5678"

$pay
[1] 500

$birth
[1] "2000-10-20"

> list1$name=c("유관순","김유신")
> list1
$name
[1] "유관순" "김유신"

$addr
[1] "서울"

$tel
[1] "010-1234-5678"

$pay
[1] 500

$birth
[1] "2000-10-20"

> list1$birth=NULL  ※ 삭제할때는 NULL 값을 넣는다. 
> list1
$name
[1] "유관순" "김유신"

$addr
[1] "서울"

$tel
[1] "010-1234-5678"

$pay
[1] 500


------------------------------------------------------------------------------
3교시

