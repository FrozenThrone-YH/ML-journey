"""
#목차

#reshape2 package  
 #melt 함수 : 와이드를 롱으로 바꿔 준다
 #dcast 함수 : 원래대로 돌려놓는 함수

#stringr package
 #str_detect() : 특정문자 포함 여부 확인하는 함수(true/false)
 #fixed(ignore.case=T) : 정확하게 일치하는 것을 찾는데, 대소문자 상관없음 
 #str_count() : 특정 문자가 몇번 나타나느냐 (특정문자 출현횟수)
 #str_c() : 문자열 합치기
 #str_dup() : 반복 출력
 #str_length : 문자열의 길이를 잰다.
 #str_replace() : 문자열 변경
 #str_split() : 주어진 데이터셋을 지정된 기호로 분리 
 #str_sub() : 지정된 길이만큼의 문자를 잘라내는 함수 
 #str_trim() : 문자열의 가장 앞과 가장 뒤에 공백제거

#sqldf package
 #Fruits 조건별 조회 
 #실습과제 
 
 #조건문과 반복문
 #비교조건에 사용되는 연산자 
 #IF조건문 
 #ifelse(a,b,c) : a가 참이면 b를 출력 거짓이면 c출력
 #While
 #break / next (continue)
 #for
 #!(not), &&(and), \\(or)
#
#
#
#
#
#
#
#
#
#
#
#



----------------------------------------------------------------------------------------------------------------
1교시
setwd("C:\\r_data")

install.packages("dplyr")
library(dplyr)
install.packages("reshape2")
library(reshape2)
install.packages("googleVis")
library(googleVis)

> fruits=read.csv("fruits_10.csv")
> fruits
   year   name qty price
1  2000  apple   6  6000
2  2000 banana   2  1000
3  2000  peach   7  3500
4  2000  berry   9   900
5  2001  apple  10 10000
6  2001 banana   7  3500
7  2001  peach   3  1500
8  2001  berry  15  1500
9  2002  apple  13 13000
10 2002 banana  10  5000
11 2002  peach   5  2500
12 2002  berry  11  1100

#melt 함수 : 와이드를 롱으로 바꿔 준다

> melt(fruits,id='year') ※ year를 기준으로 묶는다.
   year variable  value
1  2000     name  apple
2  2000     name banana
3  2000     name  peach
4  2000     name  berry
5  2001     name  apple
6  2001     name banana
7  2001     name  peach
8  2001     name  berry
9  2002     name  apple
10 2002     name banana
11 2002     name  peach
12 2002     name  berry
13 2000      qty      6
14 2000      qty      2
15 2000      qty      7
16 2000      qty      9
17 2001      qty     10
18 2001      qty      7
19 2001      qty      3
20 2001      qty     15
21 2002      qty     13
22 2002      qty     10
23 2002      qty      5
24 2002      qty     11
25 2000    price   6000
26 2000    price   1000
27 2000    price   3500
28 2000    price    900
29 2001    price  10000
30 2001    price   3500
31 2001    price   1500
32 2001    price   1500
33 2002    price  13000
34 2002    price   5000
35 2002    price   2500
36 2002    price   1100


> melt(fruits,id=c('year','name')) ※조건을 두개 줄때는 c() 컴바인으로 묶는다. 
   year   name variable value
1  2000  apple      qty     6
2  2000 banana      qty     2
3  2000  peach      qty     7
4  2000  berry      qty     9
5  2001  apple      qty    10
6  2001 banana      qty     7
7  2001  peach      qty     3
8  2001  berry      qty    15
9  2002  apple      qty    13
10 2002 banana      qty    10
11 2002  peach      qty     5
12 2002  berry      qty    11
13 2000  apple    price  6000
14 2000 banana    price  1000
15 2000  peach    price  3500
16 2000  berry    price   900
17 2001  apple    price 10000
18 2001 banana    price  3500
19 2001  peach    price  1500
20 2001  berry    price  1500
21 2002  apple    price 13000
22 2002 banana    price  5000
23 2002  peach    price  2500
24 2002  berry    price  1100
> 

> mtest=melt(fruits,id=c('year','name'),variable.name='var_name',value.name='val_name')
   year   name var_name val_name
1  2000  apple      qty        6
2  2000 banana      qty        2
3  2000  peach      qty        7
4  2000  berry      qty        9
5  2001  apple      qty       10
6  2001 banana      qty        7
7  2001  peach      qty        3
8  2001  berry      qty       15
9  2002  apple      qty       13
10 2002 banana      qty       10
11 2002  peach      qty        5
12 2002  berry      qty       11
13 2000  apple    price     6000
14 2000 banana    price     1000
15 2000  peach    price     3500
16 2000  berry    price      900
17 2001  apple    price    10000
18 2001 banana    price     3500
19 2001  peach    price     1500
20 2001  berry    price     1500
21 2002  apple    price    13000
22 2002 banana    price     5000
23 2002  peach    price     2500
24 2002  berry    price     1100

#dcast 함수 : 원래대로 돌려놓는 함수?

> dcast(mtest,year+name~var_name) ※ year와 name 으로 작업을 해서 2개를 묶어준다. 
Using val_name as value column: use value.var to override.
   year   name qty price
1  2000  apple   6  6000
2  2000 banana   2  1000
3  2000  berry   9   900
4  2000  peach   7  3500
5  2001  apple  10 10000
6  2001 banana   7  3500
7  2001  berry  15  1500
8  2001  peach   3  1500
9  2002  apple  13 13000
10 2002 banana  10  5000
11 2002  berry  11  1100
12 2002  peach   5  2500

> dcast(mtest, year~var_name) ※만약 인자가 부족하다면? missing 에러가 뜬다. 
  dcast(데이터, 기준컬럼~
Using val_name as value column: use value.var to override.
Aggregation function missing: defaulting to length
  year qty price
1 2000   4     4
2 2001   4     4
3 2002   4     4

name 별로 합계 금액과 합계 수량을 출력해라 

> dcast(mtest,name~var_name, sum)
Using val_name as value column: use value.var to override.
    name qty price
1  apple  29 29000
2 banana  19  9500
3  berry  35  3500
4  peach  15  7500

dcast(mtest,name~var_name, sum, subset=,(name=='apple'))
이름이 apple인것만 가져오기 

install.packages('plyr')
library(plyr)

install.packages('plyr')를 시켰을때, 메세지가 뜨는데 yes누르지 말고 no누를것!
그러면 no눌러도 설치는 된다. 

install.packages('stringr')
library(stringr)

#str_detect() : 특정문자 포함 여부 확인하는 함수(true/false)

> fruits=c('apple','Apple','banana','pineapple')
> str_detect(fruits,'A')      'A'가 포함됐는지
[1] FALSE  TRUE FALSE FALSE
> str_detect(fruits,'^a')    ^a 첫글자가 a로 시작하는 것 캐럿:첫글자
[1]  TRUE FALSE FALSE FALSE
> str_detect(fruits,'e$')    e$ e로 끝나는 글자 
[1]  TRUE  TRUE FALSE  TRUE
> str_detect(fruits,'^[aA]')  첫글자가 a나 A로 시작하는지 찾는 것 
[1]  TRUE  TRUE FALSE FALSE
> str_detect(fruits,'[aA]') a나 A가 있는지 찾는 것 
[1] TRUE TRUE TRUE TRUE


#ignore.case() : 대소문자 무시 - 지금은 안 먹힌다? 버전이 바뀌면서 사라짐?

#예제
p='a.b'
s=c('abb','a.b')
str_detect(s,p)   -> s에 p가 있는지 확인하기 

> str_detect(s,fixed(p))-> fixed(p) 정확히 p와 일치하는 것만 가져와라 
[1] FALSE  TRUE

> str_detect(s,coll(p))-> fixed(p) 정확히 p와 일치하는 것만 가져와라 
[1] FALSE  TRUE

> str_detect(fruits,fixed('a',ignore_case=T)) → 대소문자 구분없이 a찾기 
[1] TRUE TRUE TRUE TRUE

# str_count() : 특정 문자가 몇번 나타나느냐 (특정문자 출현횟수)

> str_count(fruits,fixed('A',ignore_case=T)) 대소문자 상관없이 a가 몇번 있는지 갯수 세기 
[1] 1 1 3 1
> str_count(fruits,'a') ignore_case=T가 없으므로 대문자 A가 빠질것이다. 
[1] 1 0 3 1

#str_c() : 문자열 합치기
> str_c("apple",'pen')
[1] "applepen"

> str_c("Fruits : ",fruits) 배열에 있는 값에 일괄적으로 문자 입력 가능 
[1] "Fruits : apple"     "Fruits : Apple"     "Fruits : banana"   
[4] "Fruits : pineapple"

> str_c(fruits," name is ",fruits)
[1] "apple name is apple"         "Apple name is Apple"        
[3] "banana name is banana"       "pineapple name is pineapple"

> str_c(fruits,collapse= "-")    ※ 구분자를 중심으로 글자가 한줄이 된다.
[1] "apple-Apple-banana-pineapple"

#str_dup() : 반복 출력

> str_dup(fruits,3) ※각 위치의 단어들이 3번씩 반복 
[1] "appleappleapple"             "AppleAppleApple"            
[3] "bananabananabanana"          "pineapplepineapplepineapple"

#str_length : 문자열의 길이를 잰다.
> str_length('apple')
[1] 5
> str_length(fruits)
[1] 5 5 6 9          ※각 위치의 글자수를 새준다.

#str_locate():특정문자의 위치값 찾기(문자열에서 특정문자가 처음 나오는 위치와 마지막 위치
> str_locate('apple','a')
     start end
[1,]     1   1

> str_locate(fruits,'a')
     start end
[1,]     1   1
[2,]    NA  NA    ※없으면 NA
[3,]     2   2    ※banana에 a가 3개인데, 첫번째 사당되는 것만 나온다.

#str_replace() : 문자열 변경
> str_replace('apple','p',"*")
[1] "a*ple"   ※ 첫번쨰 문자만 변경
> str_replace_all('apple','p',"*")
[1] "a**le" 모든 문자 변경

#str_split() : 주어진 데이터셋을 지정된 기호로 분리 

> fruits2=str_c('apple','/','orange','/','banana')
> fruits2
[1] "apple/orange/banana"
> str_split(fruits,'/')
[[1]]
[1] "apple"

[[2]]
[1] "Apple"

[[3]]
[1] "banana"

[[4]]
[1] "pineapple"


#str_sub() : 지정된 길이만큼의 문자를 잘라내는 함수 
> fruits2=str_c('apple','/','orange','/','banana')
> fruits2
[1] "apple/orange/banana"
> str_split(fruits,'/')
[[1]]
[1] "apple"

[[2]]
[1] "Apple"

[[3]]
[1] "banana"

[[4]]
[1] "pineapple"

> fruits2
[1] "apple/orange/banana"
> str_sub(fruits2,start=6,end=9)
[1] "/ora"
> str_sub(fruits2,start=-5) ※뒤에서부터 5개 
[1] "anana"

#str_trim() : 문자열의 가장 앞과 가장 뒤에 공백제거

> str_trim("      apple     banana    berry            ")
[1] "apple     banana    berry" ※ 중간 공백은 그대로 

install.packages("sqldf")
library(sqldf)

> Fruits
    Fruit Year Location Sales Expenses Profit       Date
1  Apples 2008     West    98       78     20 2008-12-31
2  Apples 2009     West   111       79     32 2009-12-31
3  Apples 2010     West    89       76     13 2010-12-31
4 Oranges 2008     East    96       81     15 2008-12-31
5 Bananas 2008     East    85       76      9 2008-12-31
6 Oranges 2009     East    93       80     13 2009-12-31
7 Bananas 2009     East    94       78     16 2009-12-31
8 Oranges 2010     East    98       91      7 2010-12-31
9 Bananas 2010     East    81       71     10 2010-12-31

select + 컬럼명(모든 컬럼을 가져오고 싶을땐 * 아스트릭) + from + file명(data명) + where + 조건

> sqldf('select * from Fruits')
    Fruit Year Location Sales Expenses Profit       Date
1  Apples 2008     West    98       78     20 2008-12-31
2  Apples 2009     West   111       79     32 2009-12-31
3  Apples 2010     West    89       76     13 2010-12-31
4 Oranges 2008     East    96       81     15 2008-12-31
5 Bananas 2008     East    85       76      9 2008-12-31
6 Oranges 2009     East    93       80     13 2009-12-31
7 Bananas 2009     East    94       78     16 2009-12-31
8 Oranges 2010     East    98       91      7 2010-12-31
9 Bananas 2010     East    81       71     10 2010-12-31


> sqldf('select * from Fruits where Fruit = "Apples"') 
※주의사항 따옴표가 중복되면 안된다. 맨 밖이 '' 홑 따옴표면 안은 쌍 따옴표여야 한다. 
  아니면 \'\'로 묶어준다. 

   Fruit Year Location Sales Expenses Profit       Date
1 Apples 2008     West    98       78     20 2008-12-31
2 Apples 2009     West   111       79     32 2009-12-31
3 Apples 2010     West    89       76     13 2010-12-31

> sqldf('select * from Fruits where Fruit = \'Apples\'')
   Fruit Year Location Sales Expenses Profit       Date
1 Apples 2008     West    98       78     20 2008-12-31
2 Apples 2009     West   111       79     32 2009-12-31
3 Apples 2010     West    89       76     13 2010-12-31


> sqldf('select * from Fruits limit 3')  ※위에서 부터 3개만 가져오고 싶을때 
   Fruit Year Location Sales Expenses Profit       Date
1 Apples 2008     West    98       78     20 2008-12-31
2 Apples 2009     West   111       79     32 2009-12-31
3 Apples 2010     West    89       76     13 2010-12-31

> sqldf('select * from Fruits order by year') ※연도를 기준으로 정렬이 되어 나온다. 
    Fruit Year Location Sales Expenses Profit       Date
1  Apples 2008     West    98       78     20 2008-12-31
2 Oranges 2008     East    96       81     15 2008-12-31
3 Bananas 2008     East    85       76      9 2008-12-31
4  Apples 2009     West   111       79     32 2009-12-31
5 Oranges 2009     East    93       80     13 2009-12-31
6 Bananas 2009     East    94       78     16 2009-12-31
7  Apples 2010     West    89       76     13 2010-12-31
8 Oranges 2010     East    98       91      7 2010-12-31
9 Bananas 2010     East    81       71     10 2010-12-31


> sqldf('select * from Fruits order by year desc') ※desc를 붙이면 내림차순으로 정렬이 된다. 
    Fruit Year Location Sales Expenses Profit       Date
1  Apples 2010     West    89       76     13 2010-12-31
2 Oranges 2010     East    98       91      7 2010-12-31
3 Bananas 2010     East    81       71     10 2010-12-31
4  Apples 2009     West   111       79     32 2009-12-31
5 Oranges 2009     East    93       80     13 2009-12-31
6 Bananas 2009     East    94       78     16 2009-12-31
7  Apples 2008     West    98       78     20 2008-12-31
8 Oranges 2008     East    96       81     15 2008-12-31
9 Bananas 2008     East    85       76      9 2008-12-31

> sqldf('select sum(Sales) from Fruits') ※판매량의 합계를 가져오고 싶다.
  sum(Sales)
1        845
> sqldf('select avg(Sales) from Fruits')
  avg(Sales)
1   93.88889
> sqldf('select max(Sales) from Fruits')
  max(Sales)
1        111
> sqldf('select min(Sales) from Fruits')
  min(Sales)
1         81


#실습과제 : 과일 이름별로 판매 합계 구하기 

> sqldf('select Fruit,sum(Sales) from Fruits') ※이렇게하면 과일별이 아니다. 
   Fruit sum(Sales)
1 Apples        845

과일별 -> 그룹을 만들어줘야 하므로 group by 가 있어야 한다. 

> sqldf('select Fruit,sum(Sales) from Fruits group by Fruit')
    Fruit sum(Sales)
1  Apples        298
2 Bananas        260
3 Oranges        287


#과일이름별로 평균 판매량을 가져와라 
> sqldf('select Fruit,avg(Sales) from Fruits group by Fruit')
    Fruit avg(Sales)
1  Apples   99.33333
2 Bananas   86.66667
3 Oranges   95.66667

※sql 쿼리문 공부 더하기 

profit 처음이 20인데 갱신하기 

apples의 2008년도 profit을 50으로 바꾼다음에 조회하기 
> sqldf(c('update Fruits set Profit=50 where Fruit="Apples" and Year=2008', 'select * from Fruits'))
    Fruit Year Location Sales Expenses Profit       Date
1  Apples 2008     West    98       78     50 2008-12-31
2  Apples 2009     West   111       79     32 2009-12-31
3  Apples 2010     West    89       76     13 2010-12-31
4 Oranges 2008     East    96       81     15 2008-12-31
5 Bananas 2008     East    85       76      9 2008-12-31
6 Oranges 2009     East    93       80     13 2009-12-31
7 Bananas 2009     East    94       78     16 2009-12-31
8 Oranges 2010     East    98       91      7 2010-12-31
9 Bananas 2010     East    81       71     10 2010-12-31

apples의 2008년도를 삭제하고 조회하기 
> sqldf(c('delete from Fruits where Fruit="Apples" and Year=2008','select * from Fruits'))
    Fruit Year Location Sales Expenses Profit       Date
1  Apples 2009     West   111       79     32 2009-12-31
2  Apples 2010     West    89       76     13 2010-12-31
3 Oranges 2008     East    96       81     15 2008-12-31
4 Bananas 2008     East    85       76      9 2008-12-31
5 Oranges 2009     East    93       80     13 2009-12-31
6 Bananas 2009     East    94       78     16 2009-12-31
7 Oranges 2010     East    98       91      7 2010-12-31
8 Bananas 2010     East    81       71     10 2010-12-31

----------------------------------------------------------------------------------------------------------------
2교시

#조건문과 반복문
#비교조건에 사용되는 연산자 

== 같다
!= 같지 않다
>= 크거나 같다
> 크다
<= 작거나 같다
< 작다

# if 조건문 - 
  if (조건식) {
     조건식이 참인경우
} else {
     조건식이 거짓인 경우 
}

> plus=function(x){
+   if(x<0){
+     return(-x)
+   } else {
+     return(x)
+   }
+   
+   
+ }
> plus(-10)
[1] 10

plus는 절대값 구하는 식~ 

#실습과제 
 입력된 숫자가 양수면 제곱 0보다 작거나 같으면 0을 출력하여라 

> times=function(x){
+   if(x>0){
+     return(x**2)
+   } else {
+     return(0)
+   }
+ }
> times(3)
[1] 9
> times(0)
[1] 0
> times(-10)
[1] 0
> times(100)
[1] 10000

if ~ else if 조건문 - 조건식이 다수개 
if (조건식1) {
 조건식1이 참인경우
} else if(조건식 2) {
  조건식2가 참인 경우
} else {
  조건식이 거짓인 경우 
}


> mf=function(x){
+   if(x>0){
+     x=x*2
+     return(x)
+   } else if (x==0){
+     x=0
+     return(x)
+   } else {
+     x=x*-2
+     return(x)
+   }
+ }
> mf(4)
[1] 8
> mf(0)
[1] 0
> mf(-6)
[1] 12


#ifelse(a,b,c) : a가 참이면 b를 출력 거짓이면 c출력
 ※조건 연산자 삼항 연산자와 비슷한 녀석 

> no=scan()
1: 10
2: 
Read 1 item
> ifelse(no%%2==0,'짝수','홀수')
[1] "짝수"

#서로 다른 두개의 숫자(자연수)를 입력받아서 두 숫자 사이에 존재하는 숫자의 갯수를 구하여라.
 ※ 나의 답 : ifelse(diff(no2)!=0,abs(diff(no2))-1,'숫자가 없음')
 ※ 강사님 답 : 

num1=scan()
num2=scan()
ifelse(num1>num2,num1-num2-1,num2-num1-1)

num3=scan()
ifelse(num3[1]>num3[2],num3[1]-num3[2]-1,num3[2]-num3[1]-1)

#반복문
#while
 초기값 
 while(조건식){
 실행문 
 증감문
}

no10=0               #초기값
> while (no10<5){    #조건식
+   print(no10)      #실행문
+   no10=no10+1      #증감문
+ }
[1] 0
[1] 1
[1] 2
[1] 3
[1] 4
> 
 
#break / next (continue)

> x=1
> while (x<5){
+   x=x+1
+   if(x==2){
+     next        #next를 통해서 다음 조건식으로 넘어간다. 
+   } else {
+     print(x)
+   }
+ }
[1] 3
[1] 4
[1] 5

> x=1
> while (x<5){
+   if(x==2){
+     break      #break를 만나면 해당 반복문을 빠져 나온다. 
+   } else {
+     print(x)
+     x=x+1
+   }
+ }
[1] 1

#for (JAVA의 향상된 for문과 유사한 형태)

초기값
for (변수 in 1:x){ #1에서부터 입력받은 x까지 
 실행문 
}

> for1=function(x){  #1에서 부터 10까지 합 
+   i=0
+   for (j in 1:x){
+     i=i+j
+     
+   }
+   print(i)
+ }
> for1(10)
[1] 55
 => 나중에 차트의 색을 임의로 정하지 않고, 사용자가 정하고 싶을때 
    특정변수의 값이 10이상이면 컬러에 red를 6~9면 블루, 그 이하는 그린을 넣겠다. 

색상 지정 예시 
> colors=c()
> for (i in 1:length(myColor)){
+   if (myColor[i]>=10){
+     colors=c(colors,"red")
+   } else if(myColor[i]>=6){
+     colors=c(colors,"yellow")
+   } else{
+     colors=c(colors,"green")
+   }
+ }


#!(not), &&(and), ||(or) |:shift + \

> my1=function(a,b){
+   if((a>1)&&(b>1)){
+     c=a*b
+     return(c)
+   } else{
+     c=a+b
+     return(c)
+   }
+ }
> my1(3,6)
[1] 18
> my1(-1,6)
[1] 5

----------------------------------------------------------------------------------------------------------------
3교시
#정규식
정규식의 ^과 stringr에서 쓰는 ^는 의미가 다르다. 

#특정패턴만 골라내기
grep(pattern,a) : 벡터a 에서 특정패턴을 찾아서 찾아서 그 위치를 출력하라 

> c1=c('apple','Apple','APPLE','banana','grape')
> grep('apple',c1)
[1] 1

> c2=c('apple','banana')
> grep(c2,c1)
[1] 1
Warning message:
In grep(c2, c1) :
  argument 'pattern' has length > 1 and only the first element will be used
찾아는 주는데, 첫번째 요소만 찾아준다.
그렇다면 여러가지 요소를 찾고 싶다면?

> grep(paste(c2,collapse='|'),c1,value=T) ※collapse는 여러개를 찾겠다는 옵션?
[1] "apple"  "banana"

> grep(paste(c2,collapse='|'),c1)
[1] 1 4

> paste(c2,collapse='|')
[1] "apple|banana"

### paste를 통해서 인자는 하나인데, or 조건이 들어간 인자가 된다. 


> c1
[1] "apple"  "Apple"  "APPLE"  "banana" "grape" 
> grep('pp',c1)
[1] 1 2
> grep('pp',c1,value=T)
[1] "apple" "Apple"

> grep('^A',c1,value=T)  ※여기서 ^캐럿은 A로 시작하는 
[1] "Apple" "APPLE"


> grep('e$',c1,value=T)
[1] "apple" "Apple" "grape"

> c3=c('grape1','apple1','apple','orange','Apple')
> grep('ap',c3,value=T)
[1] "grape1" "apple1" "apple" 

> grep('[1-9]',c3,value=T) 숫자가 포함된 단어 찾기 
[1] "grape1" "apple1"

> grep('[[:upper:]]',c3,value=T) #대문자가 포함된 단어 찾기 
[1] "Apple"

# nchar : 입력된 배열이나 문자열의 길이를 알려준다. 


> c1
[1] "apple"  "Apple"  "APPLE"  "banana" "grape" 
> nchar(c1)
[1] 5 5 5 6 5
> nchar('james bond') ※공백도 포함이 된다. 
[1] 10

> nchar('홍길동') ※ 바이트는 2바이트 먹지만, 글자수는 3개 
[1] 3


#paste('a','b','c'): a와 b와 c를 합쳐서 하나의 문자열처럼 출력하라 

> paste('홍','길','동')
[1] "홍 길 동"

> paste('홍','길','동',sep="") 이렇게하면 자동으로 들어가는 공백을 없애 준다. 
[1] "홍길동"

> paste('홍','길','동',sep="/") /로 연결된다. 
[1] "홍/길/동"


#특정부분만 골라내기 : substr('a', 시작위치, 끝나는 위치)
> substr('abc123',3,4)
[1] "c1"

#특정글자를 기준으로 분리 : strsplit('문자열',split="기준문자")

> strsplit('2019/10/27',split="/")
[[1]]
[1] "2019" "10"   "27"  

#특정패턴찾기 : regexpr('pattern',text)  (grep이랑 무슨 차이?)

> grep('-',010-1111-1111) grep은 첫번째에 있다는 것만 알고, 실제 위치는 모른다.
[1] 1 

> regexpr('-','010-1111-1111') 4번째에 있고, 문자다.
[1] 4
attr(,"match.length")
[1] 1
attr(,"index.type")
[1] "chars"
attr(,"useBytes")
[1] TRUE

여기까지가 오늘 배울 함수 

----------------------------------------------------------------------------------------------------------------
4교시

#오늘의 핵심 - 전처리 
 조심해야할 것. 이상치와 결측치를 제대로 가공해야 
 데이터 정제를 하는 이유 - 빠진 데이터 / 이상한 데이터를 정재하기 위함 


# 결측치 
 - 누락된 값 / 비어있는 값 (missing value) 
   문제점 : 함수적용불가 -> 분석 결과가 왜곡 된다. 
            반드시 제거 후 분석을 해야한다. 

 결측치 표기는 NA 로 표기 된다. 

> df=data.frame(sex=c('M','F',NA,'M','F'),
+               score=c(5,4,3,4,NA))
> df
   sex score
1    M     5
2    F     4
3 <NA>     3    #문자 결측치는 <>로 감싸진다.
4    M     4
5    F    NA

> is.na(df)      #NA값이 있냐? 
       sex score
[1,] FALSE FALSE
[2,] FALSE FALSE
[3,]  TRUE FALSE
[4,] FALSE FALSE
[5,] FALSE  TRUE

※나중에 데이터 분석할때 이 패턴 그대로 해도 괜찮다. 

> table(is.na(df))

FALSE  TRUE 
    8     2 

변수마다 NA가 있는지 확인해야한다. ※결국은 노가다?
그럼 sex에 들어있는 결측치가 몇개인지 확인하려면?


> table(is.na(df$sex))  $이걸 스트링이라고 한다. 

FALSE  TRUE 
    4     1 


> table(is.na(df$score))

FALSE  TRUE 
    4     1 

> mean(df$sex)
[1] NA
Warning message:
In mean.default(df$sex) :
  인자가 수치형 또는 논리형이 아니므로 NA를 반환합니다

※ NA가 있는 상태로 함수값 적용시 반환이 안된다. 

filter로 NA가 있는 행을 제거 할 것이다?

install.packages("dplyr")
library(dplyr)

이 패키지가 있어야 filter 패키지를 사용할 수 있다. 

> df %>% filter(is.na(score))
  sex score
1   F    NA


> df %>% filter(!is.na(score)) score에 NA가 빠짐 
   sex score
1    M     5
2    F     4
3 <NA>     3
4    M     4

> df_nomiss=df %>% filter(!is.na(score))
> mean(df_nomiss$score)
[1] 4

16을 4로 나눠서 4 / 원래 데이터는 5  

> df_nomiss=df %>% filter(!is.na(score)&!is.na(sex))
> df_nomiss
  sex score
1   M     5
2   F     4
3   M     4

모든 NA값 제거 

3.2 -> 4 -> 4.3

NA값을 없애려 행자체를 없애니 의미 있는 데이터까지 없어짐 

> df_nimiss2=na.omit(df)  #모든 NA를 없애서 출력해라 
> df_nimiss2
  sex score
1   M     5
2   F     4
4   M     4

-> 데이터 손실이 커진다. 

따라서 함수에 결측치 제거 기능을 넣는다. 


> mean(df$score,na.rm=T)
[1] 4


#예제 실습 

> exam=read.csv('csv_exam.csv')
> exam
   id class math english science
1   1     1   50      98      50
2   2     1   60      97      60
3   3     1   45      86      78
4   4     1   30      98      58
5   5     2   25      80      65
6   6     2   50      89      98
7   7     2   80      90      45
8   8     2   90      78      25
9   9     3   20      98      15
10 10     3   50      98      45
11 11     3   65      65      65
12 12     3   45      85      32
13 13     4   46      98      65
14 14     4   48      87      12
15 15     4   75      56      78
16 16     4   58      98      65
17 17     5   65      68      98
18 18     5   80      78      90
19 19     5   89      68      87
20 20     5   78      83      58


> exam[c(3,8,15),'math']=NA #임의의 NA 생성
> exam
   id class math english science
1   1     1   50      98      50
2   2     1   60      97      60
3   3     1   NA      86      78
4   4     1   30      98      58
5   5     2   25      80      65
6   6     2   50      89      98
7   7     2   80      90      45
8   8     2   NA      78      25
9   9     3   20      98      15
10 10     3   50      98      45
11 11     3   65      65      65
12 12     3   45      85      32
13 13     4   46      98      65
14 14     4   48      87      12
15 15     4   NA      56      78
16 16     4   58      98      65
17 17     5   65      68      98
18 18     5   80      78      90
19 19     5   89      68      87
20 20     5   78      83      58
> 

> exam %>% summarise(mean_math=mean(math))
  mean_math
1        NA 

당연히 NA값이 출력

> exam %>% summarise(mean_math=mean(math,na.rm=T))
  mean_math
1  55.23529

결측치를 제외하고 평균값을 산출 

> exam %>% summarise(mean_math=mean(math,na.rm=T),
+                    sum_math=sum(math,na.rm=T),
+                    median_math=median(math,na.rm=T))
  mean_math sum_math median_math
1  55.23529      939          50

결측치가 많으면? - 다른값으로 대체 
결측치 대체 

#대표값(평균,최빈값 등)으로 일괄 대체 
#통계분석 기법 적용, 예측값 추정해서 대체 
#평균 대체 방법 

exam$math=ifelse(is.na(exam$math),55.23529,exam$math)
mean(exam$math,na.rm=T)
[1] 55.23529
> exam$math=ifelse(is.na(exam$math),55.23529,exam$math)
> 
exam$math에 NA가 있으면 그 값은 55.23529로 대체하고, 그렇지 않으면 그 숫자로 해라 

> exam$math
 [1] 50.00000 60.00000 55.23529 30.00000 25.00000 50.00000 80.00000 55.23529
 [9] 20.00000 50.00000 65.00000 45.00000 46.00000 48.00000 55.23529 58.00000
[17] 65.00000 80.00000 89.00000 78.00000

3개가 평균값으로 대체되었다.

> mean(exam$math,na.rm=T)
[1] 55.23529

다시 평균값을 구해보면, 평균값에 큰 지장이 없다. 
> sd(exam$math,na.rm=T)
[1] 19.72159
> sd(exam$math,na.rm=T)
[1] 18.09777

표준편차는 지장이 있다. 


install.packages("ggplot2")
library(ggplot2)
mpg=as.data.frame(ggplot2::mpg)
mpg


mpg[c(62,124,131,153,212),'hwy']=NA  #NA 5개 임의로 대입 
mpg


#실습문제

Q1. drv(구동방식)별로 hwy(고속도로 연비) 평균이 어떻게 다른지 알아보려합니다.
분석을 하기 전에 우선 두 변수에 결측치가 있는지 확인해야 합니다.
drv 변수와 hwy변수에 결측치가 몇개 있는지 알아보세요 

> table(is.na(mpg$drv))

FALSE 
  234 

> table(is.na(mpg$hwy))

FALSE  TRUE 
  229     5



Q2. filter()를 이용해 hwy 변수의 결측치를 제외하고, 어떤 구동방식의 hwy평균이 높은지 알아보세요,
하나의 dplyr 구문으로 만들어야 합니다.


#나의 실습 
> mpg$hwy=ifelse(is.na(mpg$hwy),mean(mpg$hwy,na.rm=T),mpg$hwy)
> sqldf('select drv,avg(hwy) from mpg group by drv')
  drv avg(hwy)
1   4 19.24242
2   f 28.20000
3   r 21.00000


> sqldf('select drv,avg(hwy) from mpg group by drv')
  drv avg(hwy)
1   4 19.40938
2   f 28.15605
3   r 21.00000


#강사님 해설
> mpg %>% filter(!is.na(hwy)) %>% group_by(drv) %>% summarise(mean_hwy=mean(hwy))
# A tibble: 3 x 2
  drv   mean_hwy
  <chr>    <dbl>
1 4         19.2
2 f         28.2
3 r         21  

> mpg %>% filter(!is.na(hwy)) %>% group_by(manufacturer) %>% summarise(mean_hwy=mean(hwy))
# A tibble: 15 x 2
   manufacturer mean_hwy
   <chr>           <dbl>
 1 audi             26.4
 2 chevrolet        21.9
 3 dodge            18  
 4 ford             19.4
 5 honda            32.6
 6 hyundai          26.9
 7 jeep             17.4
 8 land rover       17  
 9 lincoln          17  
10 mercury          18  
11 nissan           25  
12 pontiac          26.4
13 subaru           25.6
14 toyota           24.9
15 volkswagen       29.4


#이상치
정상범주에서 크게 벗어난 값 
논리적으로 존재할 수 없는 값은 결측 처리 후 분석 시 제외
극단적인 값은 정산범위 기준을 정해서 결측 처리
----------------------------------------------------------------------------------------------------------------
4교시

----------------------------------------------------------------------------------------------------------------
5교시

"""
