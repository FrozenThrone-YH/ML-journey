"""
# GUI 프로그래밍(교안과 함께 참조)

- 우리가 흔히 알고 있는 버튼을 활용해 동작시키는 프로그래밍.

- 아웃풋을 만들어내서 배포하는데 주로 사용함(다른 두 가지 방법은 웹앱 or 어플리케이션화)

- .exe파일로 만들어 사용자에게 제공하는것이 최종 목표
"""

# 파이썬 GUI 프로그래밍을 위한 라이브러리 tkinter 임포트 
from tkinter import *

#하단의 root 라는 변수가 바로 우리가 알고 있는 창이 됨

root = Tk()

# 실행해도 아무일도 일어나지 않는다.
# 이 창은 로직상 마지막에 위치해야 하기 때문에 코드 박스 순서를 가장 하단에 둡니다!
# root라는 변수를 유지시키기 위해 .mainloop()가 필요함
# root = Tk()는 단순히 창을 만들기 위함

# root 변수에 저장된 창을 유지시키기 위해서는 .mainloop()라는 메서드가 필요함
root.mainloop()

"""
### 창설정
- 창 이름은 .title()로 설정
- 창 크기는 .configure(width="숫자", height="숫자") 로 할 경우 픽셀단위 설정
- .configure(width="숫자m", height="숫자m") 로 할 경우 mm단위로 설정
- 창 크기 설정은 .place()를 사용할때만 사용가능
- .grid() 사용시는 grid()에 따른 부품크기에 창이 자동으로 맞춰진다.
"""

# 타이틀(창 상단에 찍힐 이름) 바꾸기
root.title("파이썬 GUI 프로그래밍")

# 창 크기 조정하기
root.configure(width="600",height="600")

"""
# 창부품 개념
- 창부품이란 생성한 윈도우 창에 배치할 버튼이나 특별한 기능을 가진 요소(입력창이나 리스트박스 등등) 을 의미합니다.
- 위치를 직접 지정해줄 수도 있고, 혹은 상대적인 위치를 지정할 수도 있습니다.<br><br><br>
- 위치를 정하는 방법은 <br>
- .place(x= , y= , width= , height=) -> x좌표, y좌표, 부품너비, 부품길이
- .grid(column=, row= , padx= , pady= ) -> 가로n번째, 세로n번째, 가로축 길이, 세로축 길이
- 를 사용합니다.
"""


# Button
# 버튼은 클릭했을 때 동작하는 버튼을 의미합니다.
# 버튼은 버튼과 버튼을 클릭했을때 동작시킬 코드(함수로 지정)를 지정해야 가능합니다.
def test():
    print("Hello GUI")


### 부품 설정 및 배치 
bt1 = Button(root,text="테스트",command="").place(x=10,y=10,width=100,height=30)
#button(창변수, text='버튼이름',command=함수명) - 버튼 속성만 지정
#위치설정은 .place(x=정수값,y=정수값,width=정수값,height=정수값)
# 가구를 집 내부 어디에다 넣을 것인가?

#참고 / grid 활용 (grid)는 커스터마이징이 어렵다. 
bt1 = Button(root, text = "테스트").grid(column=3,row=2,padx=100,pady=30)

# 가상의 column과 row 가 있다고 생각, 가상의 인덱스 순서가 있는걸로 간주 
# 칼럼 3번쨰, 로우 2번째, 

# Entry() : 자료를 사용자에게 키보드로 입력 받을 수 있는 창
# ListBox() : 선택지가 이미 있는 창
# Label() :  안내 혹은 결과를 나타내 주는 창

# Entry()
# 엔트리는 사용자에게 문자열을 직접 입력받는 창부품입니다.
# 엔트리에 입력된 문장은 .get()을 이용해 얻어 올 수 있습니다.

### 함수부분 ###
def get_E1():
    E1 = Et1.get()
    print(E1)


### 부품 설정 및 배치부분 ### (보통 배치 부터 하고 로직을 짜는 것이 일반적)
Et1 = Entry(root)
Et1.place(x=10,y=90,width=100,height=30)


# 버튼을 하나 더 배치해주세요 
# 배치한 버튼은 위쪽 함수부분의 get_E1()함수를 통해 result라는 변수에 
# 값을 저장한 다음 print(result) 구문을 이용해 엔트리에 입력된 자료를 콘솔에 출력합니다. 
Bt3 = Button(root, text="입력",command=get_E1).place(x=130,y=90,width=100,height=30)

# 버튼을 누를때마다 get_E1이 실행되고 Entry값이 출력된다. 

# listbox()
# 리스트박스는 사용자에게 리스트를 보여주는 창 부품입니다.
# 리스트박스에는 넣고 싶은 자료를 넣거나 뺄 수 있습니다.
# 리스트박스는 함수설정을 통해 내부 리스트요소 클릭을 감지 할 수 있습니다.

### 감지함수 ###
# 클릭하는 걸 감지할 수 있게 한다. 
# 아래코드를 그냥 복붙해서 쓰기  
def onselect(evt):
    w = evt.widget
    index = w.curselection() 
    value = w.get(index)
    print(index,value)


### 부품 설정 및 배치 부분 ###
LB1 = Listbox(root)
LB1.place(x=10,y=130,width=100,height=150)
### 리스트박스에 요소 추가하기 (좋아하는 음식 3개 추가)
LB1.insert(0,"김치찌개")
LB1.insert(1,"된장찌개")
LB1.insert(2,"부대찌개")
# 0,탕수육
# 0, 피자
# 0, 치킨이면 화면에는 치킨/피자/탕수육 순서로 출력된다. 
# 탕수육 먼저 출력됐다가 0번에 피자가 추가되면서 전체적으로 하나씩 밀린다. 

### 버튼클릭 감지 (이벤트 bind - 사건 묶기?)
LB1.bind('<<ListboxSelect>>',onselect)

# Listbox를 하나 더 추가해주세요
# L2 변수를 이용해 만들어주세요
# 만든 리스트박스에는 가고 싶은 여행지를 5개 입력해주세요
###감지함수
def onselect2(evt):
    w = evt.widget
    index = w.curselection() 
    value = w.get(index)
    print(index,value)

### 부품 설정 및 배치 부분
LB2 = Listbox(root)
LB2.place(x=130,y=130,width=100,height=150)
### 리스트 박스에 요소 추가 하기 (선호 여행지 5개 추가)
LB2.insert(0,"치앙마이")
LB2.insert(1,"밀라노")
LB2.insert(2,"니스")
LB2.insert(3,"두바이")
LB2.insert(4,"하와이")
### 버튼 클릭 감지
LB2.bind('<<ListboxSelect>>',onselect2)

#엔트리 두개를 만들어주세요
#변수명은 Et2, Et3로 만들어주세요
#Et2에는 이름을, Et3에는 성을 입력 받아서
#버튼을 클릭하면 성+이름을 조합해서 
# 콘솔창에 출력하도록 부품들을 배치해보세요 

### 함수부분 ###
def get_name():
    E2 = Et2.get()
    E3 = Et3.get()
    print(E2+E3)
    
### 부품 설정 및 배치부분 ### 
Et2 = Entry(root)
Et2.place(x=300,y=200,width=100,height=30)
Et3 = Entry(root)
Et3.place(x=300,y=240,width=100,height=30)

### 버튼 
Bt4 = Button(root, text="이름입력",command=get_name).place(x=300,y=270,width=100,height=30)

# 리스트박스 내부에 입력된 자료 삭제
LB1.delete(0,0)
# 리스트박스 내부에 입력된 전체 자료 삭제 
LB1.delete(0, END)

# Label-레이블 ; 창 내부 적어 놔서 클릭해도 반응 없는 것 
# 레이블은 사용자에게 보여줄 공지사항 등을 보여주는 창 부품 입니다.
# 레이블에는 원하는 문구를 지정해서 창에 출력할 수 있습니다.
# 함수를 활용해 결과를 보여줄 수도 있고
# 함수 활용 이전에 디폴트 상태에서 노출시키는 것도 가능합니다.

# 외부창에 출력하기
La1 = Label(root,text="레이블입니다.")
La1.place(x=10,y=330,width=100,height=30)

# La1 오른쪽 x=140, y=330에 bt4 버튼을 생성해주세요
# 이 버튼은 클릭하면 함수 get_lb2()를 실행합니다. 
# get_lb2는 내부 실행문으로 Lb2변수를 사용한 레이블을 생성해줍니다.
# 이 함수는 "Lb2 생성완료"라고 적힌 레이블을 root 창 내부에 심어줍니다. 
# x=10, y=370에 생성하도록 함수를 생성해주세요 

### 함수
def get_La2():
    La2 = Label(root,text="La2 생성완료")
    La2.place(x=10,y=370, width=100,height=30)

### 버튼
Bt5 = Button(root, text="레이블입력",command=get_La2).place(x=140,y=330,width=100,height=30)

# Spinbox
# 스핀박스는 엔트리아 비슷하지만 범위 내의 숫자 하나를 고를 수 있는 창 부품입니다.
# 스핀박스 내부의 값을 .get()으로 얻을 수 있습니다. 
# from =0 , to=10 (0~10까지, to값을 포함한다) 
# .get()을 통해 얻어오는 자료형은 문자열이다. 숫자로 쓰고 싶을때는 int나 float를 써야 한다. 

### 함수부분
def get_sb1():
    S1 = sb1.get()
    La3 = Label(root,text=S1)
    La3.place(x=370,y=330, width=100,height=30)

### 부품 설정 및 배치부분
sb1 = Spinbox(root, from_=0,to=10)
sb1.place(x=260,y=330, width=100,height=30)

### 버튼 배치 
Bt5 = Button(root, text="SB값입력",command=get_sb1).place(x=260,y=370,width=100,height=30)

# OptionMenu
# 부품이 2개인데, 2개가 한쌍으로 작동을 한다. => 2개를 넣어야 한다. 
### 함수 부분 ###
def get_op1():
    O1=variable.get() # 현재 골라져 있는 것이 variable이기 때문에 
    La4 = Label(root,text=O1)
    La4.place(x=370,y=10, width=100,height=30)

### 창 부품 설정 및 배치부분 ###
option1 = ["Python","Java","C++","C","JavaScript"]
variable = StringVar(root)# 현재 골라져 있는 것 
variable.set(option1[0]) # 메뉴창에 초기에 설정된 값은 "1"
op1=OptionMenu(root,variable,*option1) #option1앞에 '*'임을 주의할것.
op1.place(x=260,y=10,width=100,height=30)

### 버튼 배치 
Bt6 = Button(root, text="옵션선택",command=get_op1).place(x=260,y=40,width=100,height=30)
