"""
pymysql
파이썬에서 mysql을 컨트롤할수 있도록 도와주는 라이브러리
파이썬 내부의 데이터를 DB에 적재하도록 도와줌
DB내부의 자료를 파이썬으로 끌어오도록 도와줌
자료 적재, 수정, 삭제 명령은 수행한 다음 commit()명령까지 수행해야 반영됨"""

# pip install pymysql 
import pymysql

# con 변수에 접속정보 저장, con.cursor()을 받은 cur변수를 매개로 
# DB에 파이썬 코드를 이용한 명령을 내릴 수 있다.
con = pymysql.connect(host='localhost',port=3306,user='py',password='py',
                     db='py_practice',charset='utf8mb4')
cur = con.cursor()

#host => 현업부서에 가면 url 서버 줄것이다. 
#charset은 utf8만 치면 error가 뜨고, utf8mb4라고 써야 한다. 
#실행했을때 error문구가 안뜨면 연결이 된 것이다. 

# cur.execute("쿼리문") 내부에 ; 를 제외한 쿼리문을 작성하면 연결한 DB에 그대로 전달
#"" 쌍따옴표를 하는 것이 좋다. 
# 내부 자료 전체 조회 명령을 수행해보세요.
cur.execute("SELECT * FROM users")
# 결과값 : 몇로그가 조회됐다. /자료가 없으면 0이 나온다. low갯수를 len으로 찍은거라고 보면 된다. 

# cur.fetchall() 명령문은 select 구문을 통해 조회된 자료가 DB에 저장되어 있는데, 
# 그 자료를 받아오는 명령어이다. 
# SELECT 구문은 조회 구문이기 때문에 결과물이 존재하며 
# SELECT이외의 구문 (UPDATE, DELETE, INSERT INTO)를 수행한 후에도 fetchall()을 쓸 수 는 있으나,
# 유의미한 결과물이 나오지 않는다.
result = cur.fetchall()

cur.fetchall() #일회성으로 받아온다. 딱 한번 받아온다. 엔터를 두번치면 받아오지 않는다. 

# 조회한 자료는 이중튜플형태로 얻어진다. 각 low 하나를 튜플로 만든다. 
print(result)

# 얻어온 자료를 리시트로 바꿔야 DataFrame으로 변환 가능 
result_li = list(result)

#데이터프레임으로 변환하기 
import pandas as pd
import numpy as np

df = pd.DataFrame(result_li)
df

# 컬럼명을 원본 db에서 쓰던이름으로 바꾸기
df.columns = ['id','pw','name','pnum']
df

# 여러분들이 직접 DB에 INSERT INTO 구문을 이용해 자료를 기입해보세요 
cur.execute("INSERT INTO users values('Bypython123','bp123','frompython','01012345698')")
# 결과값이 1이면 잘 들어갔다는 것이다. (전달되면 1 - error 여부는 모른다.)

# select 문이 아니라면 결과물이 나오지 않는다.
cur.fetchall() #fetchall()을 해도 아무것도 나오지 않는다. 

# 전체 데이터를 가지고 와 주세요 
cur.execute("SELECT * FROM users")
# 중요한 사실은 MySQL워크 벤치에서는 반영이 안된다.
# MySQL에 확정적으로 자료를 넣고 싶은 경우는 아래 명령어를! 
cur.execute('commit')

#가지온 데이터를 조회해주세요 
result2 = cur.fetchall()
result2_li=list(result2)
df2 = pd.DataFrame(result2_li)
df2

# update 구문을 이용해서 정보를 수정해주세요. 하나의 row만 수정해야하며 조건은 마음대로
cur.execute("UPDATE users SET name = '인서트' WHERE name = 'insert'")
cur.execute('commit')
cur.execute("SELECT * FROM users")
result3 = cur.fetchall()
result3_li=list(result3)
df3 = pd.DataFrame(result3_li)

#삭제 명령, 로우 한줄을 삭제해주세요, 임의의 조건을 걸어서 삭제해주세요.
cur.execute("DELETE FROM users WHERE name='01094129463'")
# 삭제 명령은 primary key 위주로 하는 것이 좋다. 
# 왜냐면 중복되는 것도 삭제 될 수 있기 때문이다. 
cur.execute('commit')
cur.execute("SELECT * FROM users")
result4 = cur.fetchall()
result4_li=list(result4)
df4 = pd.DataFrame(result4_li)
df4.columns=['id','pw','name','pnum']

# 가져온 데이터를 엑셀형태로 출력하기 
# df.to_excel('파일이름')을 입력하면 주피터노트북 파일과 같은 경로에 
# 테이터프레임이 엑셀파일로 변경되어 출력된다.
df4.to_excel('MySqltoPython.xlsx')

# 모든 execute 명령은 임시적으로 실행되는 것이므로 DB에는 반영이 되지 않는다. 
# DB에 확정적으로 반영시키기 위해서는 commit 명령을 내린다.
cur.execute("commit")

