"""
[1] R소개
  1) 데이터 분석 도구의 현황
    - 다른 프로그램에 비해 R의 사용이 증가하고 있다.
  2) R의 탄생 
    - R은 오픈 소스 프로그램으로 통계, 데이터 마이닝과 그래프를 위한 언어
    - 다양한 최신 통계분석과 마이닝 기능을 제공
    - 세계적으로 사용자들이 다양한 예제를 공유
    - 다양한 기능을 지원하는 5000개에 이르는 패키지가 수시로 업데이트
    
  3) 분석도구의 비교 
                                        SAS                    SPSS                     R
    - 프로그램 비용                   유료, 고가               유료, 고가               오픈소스, 무료
    - 설치용량                       대용량                    대용량                  모듈화로 간단
    - 다양한 모듈 지원 및 비용        별도 구매                 별도 구매                오픈소스
    - 최신 알고리즘 및 기술반영       느림                       다소 느림               매우 빠름
    - 학습자료 입수의 편의성          유료 도서 위주             유료 도서 위주           공개 논문 및 자료 많음 
    - 질의를 위한 공개 커뮤니티       NA                         NA                     매우 활발 
    - 유지보수                       쉽다                        쉽다                  어렵다
    
  4) R의 특징
    - 오픈소스 프로그램 
      : 사용자 커뮤니티에 도움 요청이 쉽다
        약 5000개의 패키지가 수시로 업데이트 된다.
    - 그래픽 및 성능
      : 프로그래밍이나 그래픽 측면 등 대부분의 주요 특징들에서 상용프로그램과 대등하거나 월등하다.
    - 시스템 데이터 저장 방식
      : 각 세션 사이마다 시스템에 데이터셋을 저장하므로 매번 데이터 로딩할 필요없고 명령어 히스토리 저장 가능하다.
    - 모든 운영체제
      : 윈도우, 맥, 리눅스, 운영체제에서 사용가능하다.
    - 표준 플랫폼
      : S통계 언어를 기반으로 구현된다.
        R/S 플랫폼은 통계 전문가들의 사실상의 표준 플랫폼이다.
        
  5) 객체 지향언어 이며 함수형 언어
    - 통계 기능 분만 아니라 일반 프로그래밍 언어처럼 자동화하거나 새로운 함수를 생성하여 사용가능하다.\
    - 객체지향 언어의 특징
      : SAS, SPSS 회귀분석 시 화면에 결과가 산더미로 나온다. 대신 R은 추정계수, 각각의 표준오차, 잔차등
        결과값인 객체를 반환한다. 필요한 부분을 프로그래밍으로 골라 추출하여 활용가능하다.
    - 함수형 언어 특징
      a. 더욱 깔끔하고 단축된 코드
      b. 매우 빠른 코드 수행속도 
      c. 단순한 코드로 디버깅 노력 감소
      d. 병렬 프로그래밍으로의 전환이 더욱 용이
  
  6) R스튜디오 
    - 오픈소스이고 다양한 운영체계를 지원한다.
    - R스튜디오는 메모리에 변수가 어떻게 되어 있는지와 타입이 무엇인지를 볼 수 있고,
      스트립트 관리와 도큐먼데이션이 편리하다.
    - 코딩을 해야하는 부담이 있으나 스크립트용 프로그래밍으로 어렵지 않고 쉽게 자동화 가능하다. 
   
     Script / Environment/History   /. console   / Files, Plot , Packages, Help, Viewer
     Ctrl + Enter 누르면 실행?

[2] R설치
   - https://www.r-project.org
   
[3] R의데이터 구조
  1) 벡터 방이 있고, 방 각각에 들어간 것을 스칼라라고 한다. 
  2) 행렬
  3) 배열
  4) 데이터프레임
  5) 리스트
   # : 주석처리 '문자' 변수선언 ex) vector1 <- C(1,2,3,4) / vector = c(21,22,23)
   ※ =보다는 <- ※여기서 c는 c함수를 이용한다는 의미 
   indexing vector1[1]
   
   R에서 코딩친거 예제 
   # ★ 벡터 시험에 자주 나온다. 
   c(1,2,3,4)
   c('a','b','c')
   vector1 <- c(11,22,33)
   vector1
   
   vector2
   vector2=c(21,22,11)
   
   vector2[2] : vector2의 2번째 항목을 가져옴 
   vector2[1] : vector2의 1번째 항목을 가져옴 ※python은 0번부터 시작하지만 R은 1번부터 시작한다. 
   
   aa<--c(33,44,55,66,77) 
   aa[-3] : 55요소를 생략한 나머지 값을 불러 온다.
   aa[-1:-2] : 1~2번을 제외하고 나머지 값을 불러 오겠다. 
   aa[2:4] : 2~4번까지 해당하는 값을 가져오겠다. 
   aa[3]<-100 : 3번방을 100으로 변경하겠다. 
   
   # 새로운 내용을 벡터에 추가 
   aa<- c(aa,200) : aa라는 요소 뒤에 200을 추가 하겠다. 
   
   aa[9] <- 99 : 6개방 중에 9번째 방에 99를 넣는다? 7,8번째 방은 NA라고 처리되고 9째 방에 99가 설정된다. NA=결측치
   
   append(aa,11111) 끝에 요소를 추가하는 함수이고, 
   aa만 치게 되면 11111 이 추가되어 있지 않다. 
   
   append(aa, 5454, after = 4) : 4번째 방 뒤에 요소 추가 
   append(aa, 1111, after = 0) : 맨 앞에 요소를 추가하고 싶다. 
   
   z<-c(TRUE, FALSE) 불릿값을 넣을때는 대문자로 넣어줘야 한다.! 
   
   # 벡터 연산 
    c(1,2,3)+c(4,5,6) : 결과값 - 5,7,9
    c(1,2,3)+1 결과값 : 2,3,4 (각 결과값에 1을 더해준다.)
    x<-c(1,2,3)
    y<-c(2,3,4)
    x+y 결과값 : 3,5,7
    
    c(1,2,'a') : 문자로 인식
    
    # 벡터의 길이를 얻는 함수 
    length() 
    
    length(x) : 결과값 3 (x는 3개가 있는 함수) 
    
   # Matrix (행렬)
   # matrix()함수 사용
   
   m<-matrix(c(1,2,3,4))  : 1열 4행짜리 행렬 생성
   m2<-matrix((c(1,2,3,4),nrow=2) : 2열 2행까지 행렬 생성 (nrow = 2 -> 2행 짜리로 만들겠다)
   m3<-matrix((c(1,2,3,4,5,6),ncol=2) : 2열 3행까지 행렬 생성 (ncol=2 -> 2열짜리로 만들겠다.)
   
   #행우선으로 입력하고자 할 경우에는 byrow=T 설정한다.
   
   m4 <-matrix(c(1,2,3,4,5,6),nrow=2,byrow=T)
   3열 2행으로 생성됨
   
   #컬럼의 이름을 지정
   m5<-matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=T) 3열 3행함수 생성
   
   colnames(m5) <- c('A','B', 'C')
   
   하면 열의 이름이 지정된다. 
   
  # 행 추가 함수 rbind() 함수
  m5 <- rbind(m5, c(10,11,12)) : 4행에 10,11,12추가됨
  m5 <- rbind(m5, c(11,2,22,33)) : 에러 갯수가 맞아야 한다. 33을 빼고 22까지만 들어간다.. 
  
  # 열 추가 함수 cbind() 함수 
  m5 <-cbind(m5, c(11,11,11,11))
  
  # 배열 (다차원 형태의 데이터) 행렬(2차원 데이터) ※열 우선 방식
  array (1:9, dim=c(3,3)) : 1부터 9의 숫자로 3행 3열의 배열을 만들겠다. 
  array(1:12, dim=c(2,2,3)) : 1부터 12의 숫자로 2행 2열의 행렬을 3개 만들겠다.
  ,,1             ,,2               ,,3
       [,1][,2]            [,1][,2]           [,1][,2] 
  [1,]   1   3        [1,]    5   7      [1,]    9  11
  [2,]   2   4        [2,]    6   8      [2,]   10  12
  
  # 데이터 프레임 : 행렬과 유사한 2차원 데이터 구조 
    행렬과 다른점은 각열이 서로 다른 데이터 형식을 가질 수 있다. ※ 행렬은 동일한 데이터 형식만 가능 
    데이터 프레임에 들어갈 벡터의 길이는 동일해야 한다.
    
    x1 <- c(11,22,33)
    x2 <- c("a","b","c")
    x3 <- c(TRUE,FALSE, FALSE)
    
    df <- data.frame(id=x1,name=x2, marriage=x3)
    df  출력시 
            id     name     marriage
         1  11      a          TRUE
         2  22      b         FALSE
         3  33      c         FALSE
  
  
  # 리스트 : 벡터의 각 원소들이 이름을 갖는다. 
            각 원소들은 서로 다른 데이터 형식으로 구성 될 수 있다.
    xx<-list("홍길동","201801", 20, c("R언어","자바"))
    xx출력시 
    [[1]]
    [1] "홍길동"
    [[2]]
    [1] "201801"
    [[3]]
    [1] 20
    [[4]]
    [1] "R언어" "자바"
    
    yy<-list("이름"="홍길동", "학번"="201801", "나이"=20, "수강과목"=c("R언어","자바"))
    $이름 
    [1] "홍길동"
    $학번
    [1] "201801"
    $나이
    [1] 20
    $수강과목
    [1] "R언어" "자바"
    
    yy$이름  : 결과값 [1] "홍길동"
    ※ 리스트는 python의 딕셔너리와 유사 
    
[4] 외부 데이터 불러오기
  1) read.csv()함수로 csv불러오기
   - 라벨 구분이 ,(콤마)인 경우에 사용하기 간편함
   - 라벨 구분이 tab으로 구분된 파일이라면 sep="\t" 옵션 사용
   
   #setwd()함수를 이용해서 작업 디렉토리를 지정
   setwd("h:\\Adsp_R")
   x<-read.csv("aa.csv")
   y<-read.csv("bb.csv",header=FALSE) 로 하면 헤더가 v1v2v3로 설정됨 
   
   write.csv(y, "cc.csv", row.names=FALSE) : 맨앞에 row 번호가 사라진 상태로 저장됨 
   
  2) read.table 일반 텍스트 형태의 파일을 읽어서 데이터 프레임에 담기
    - read.table : 데이터를 R로 불러들이고 데이터 프레임에 담기 
    
    txt<-read.table("houses.txt", header=T) 로 하면 헤더값이 보인다. 
    txt하면 메모장에 있는 글을 읽어온다. 

[5] R기초 함수 
  1) 수열 생성하기  
    - 대표적인 생성 방식으로는 숫자사이에 :를 사용하는 방법 
    - rep함수는 특정값을 반복 seq함수는 시작숫자와 끝 숫자를 정해주면 숫자를 생성 

    
  
  # R에서 실행 
  10:30 엔터치면 - 10부터 30까지 1씩 증가한다. 
  30:10 엔터치면 - 30부터 10까지 1씩 감소 한다.
  5:-5 엔터치면 5부터 -5까지 1씩 감소 한다.
  
  rep(1,5)    1이 열번 반복 
  rep(100,10) 100이 열번 반복 
  
  #times 인자 : 앞에 나온 숫자를 몇번 반복할지를 정하는 인자 
  rep(c(10,20), times=2) 10 20을 2번 반복
  # each 인자 : 앞에 나온 숫자를 각각 몇번 반복할지를 정하는 인자 
  rep(c(1,3), each=2) 1 1 3 3 각각 2번씩 반복해서 나온다. 
  
  seq(2,10) 시작 숫자와 끝숫자를 정해주면 1씩 증가시켜서 수열을 만든다. 
  seq(from=3, to=10)
  seq(from=2, to=10, by=2) 2부터 10까지 2씩 증가 
  
  seq(from=2, to=10, length.out=4) 2부터 10까지 숫자를 4등분해서 2 4.6 7.3 10.0
  seq(from=1, by=2, length.ouyt=10) 1 3 5 7 9 11 13 15 17 19 1부터 2씩 증가해서 갯수가 10이 되게끔 생성
  seq(from=1, to=10, length=3) 1.0 5.5 10.0
  2) 평균, 분산, 표준편차 
    - 평균 : mean()
    - 표본 분산 : var()
    - 표본 표준 편차 : sd()
  3) 기초변환 및 상관계수, 공분산
    - sum()
    - median() : 중앙값
    - log() : 자연로그
    - cov() : 공분산   두 집단이 있고, 한쪽이 상승하고 다른한쪽도 상승하면 + / 한쪽이 상승하고 한쪽이 하강이면 - 
    - cor() : 상관계수 -1부터 1까지의 값, 0이면 상관없다. 0.3~0.7 양적상관관계 0.7~1.0 강한 양적 상관관계 
       co-relation인가?
    - summary() : 주어진 벡터에 대한 각 사분위수 최소값, 최대값, 중앙값, 평균 
    
    # R에서 실행
     x<- 1:10
     mean(x) 평균 5.5
     var(x)  분산 
     sd(x)  표준편차 
     sum(x) 합계 
     median(x) - 5.5 (위치 값) 지금은 평균이랑 같지만, 같이 않을 수 도 있다. 
     log(x) 
     xx<-log(x) 
     cov(x, xx) 2.11 두 벡터간 상관계가양수라서 한쪽이 증가하면 다른쪽도 증가한다.
     cor(x, xx) 0.95 두 벡터간 상관관계가 강하다. 
     summary(x) 최소값1  1번째 쿼터값3.25  중앙값5.5 3번째 쿼터값 7.75  max10 
          

  
[6] ★ 데이터 핸들링 
  1) 반복 구문과 조건문
    - for / while / if-else
  2) 사용자 정의 함수
  3) 기타 유용한 기능
    - 문자열 통합
    - 특정 문자열 추출
    - 데이터 구조 변환
    - 문자열 특성 변환 
    
    #R에서 실행 
    bb<- c("a","b","c"
    bb[2] : "b"
    b[c(1,2)] : "a","b" 가 출력 된다. 여러개 할때는 c함수로 해줘야하낟.
    
    #for 문
    x<-c()
    for (i in 1:9) 1부터 9까지의 숫자를 i에 대입하겠다. 
    {
     x[i]=i*i
    } 결과물 : 1 4 9 16 25 36 49 64 81
       
     i = 1
     while(i<10) 조건이 해당되면 계속 돈다.
     {
      i=i+1
      print(i)
     }
     
     # if - else, if
        == 같다, != 같지 않다, >= 크거나 같다. > 크다 < 작다, <=작거나 같다 
       
       x<-c(1,2,3,4,5)
       x
       y<-x+5
       y
       if(sum(x) < sum(y)) 
       {
        print(x)
       }
       else
       {
       }
       
       
       #문자열 통합 
        paste 함수 - 문자열을 합치는 함수 
        number <- 1:5 수열 
        str <-c("aa","bb","cc")
        
        paste(number, str) "1 aa", "2 bb" , "3 cc" "4 aa" "5 bb"
        
        paste(number, str, sep="/") 1/aa", "2/bb" , "3/cc" "4/aa" "5/bb"
        
        x<-data.frame(x1=c("A","B","C","D","E"), X2=C("F","G","H","I","J")
        
        y<-paste(x$x1, x$x2)
        "A F" "B G" "C H"
        
        y<-paste($x1, x$x2, sep="") 공백없이 합친다.
        
        z<-paste(x$x1, collapse="") -> "ABCBE" x1을 하나로 합친다. 
        
        substr 함수 문자열 추출 
        
        substr("2018-08-08",6,7)
        "08" 6번째 부터 7번째까지 추출 
        substr("2018-08-08",5,9)
        "-08-0" 
        
        aa <- c("Good", "Morning")
        substr(aa, 1,2)
        "Go","Mo" 각각 단어를 추출해준다.
        
        nchar : nchar(x) 문자형 벡터의 x의 구성요소 개수를 구한다.
        x<- c("seoul", "new york", "london","1234")
        nchar(x) 5 8 6 4 공백 포함 글자 갯수를 카운트 한다.
        
        strsplit함수 : strsplit(x, split=",") : 문자형 벡터 x를 split 기준으로 나누기 
        name <-c("Kim, Gildong", "lee, minsu", "park, namgil")
        name_split<-strsplit(name, split=",")
        [[1]] [1]"kim" "gildong" [[2]][1] "lee" "minsu" [[3]][1] "park" "namgil"
        
        sub함수 " sub(old, new, x) 문자형 벡터x에서 나오는 old 문자를 new문자로 한번만 바꿈
        z<- c("My name is Gildong, What's your name?"
        sub("name", "first name", z)
        name이 First name으로 바뀐다. 첫번째 문자만 바뀐다.
        
        gsub(old, new, x) : 모든 글자를 바꾼다. 
        
        sub("name", "", z) - name을 삭제할때
        
        # ★ 데이터 구조 변환
        numeric type : 실수까지 표현 가능한 타입
        integer type : 정수값을 표현하는 데이터 타입
        factor type : 범주형 타입 (순서를 갖는 타입) 
        character type : 문자열을 나타내는 데이터 타입 
        
        자료형 변환  as.원하는 자료형 
        
        as.character() : 문자형으로 바꾼다.
        as.numeric() : 실수형으로 바꾼다.
        as.complex() : 복소수형으로 바꾼다.
        as.logical() : TRUE나 FALSE타입으로 바꾼다.
        
        #자료구조 변환
        as.data.frame() / as.list() / as.matrix() / as.vector 
        as.factor 
        
        x<-0:5 0부터 5사이 수열 만듬
        str(객체) : 데이터 구조, 데이터 타입, 변수 확인 가능 python의 type() 
        str(x) -> 결과 값 str(x) int[1:6] 0 ~ 5 
        
        x<-as.character(x) -> 결과값 chr [1:6] "0" "1" "2" ----
        
        x<-as.numeric(x) -> 결과값 num[1:6] 0 1 2 3 4 5 (정수도 가능하고,실수도 가능)
        
        x<-as.complex(x) ->결과값 cplx[1;6] 0+0i 1+0i 
        
        x<-as.double(x) -> num[1:6] 실수형으로 바꾸는 건 두개 numeric/double
        
        #TRUE or FALSE
        0 : FALSE, 0을 제외한 나머지는 TRUE
        
        x<-as.character(x)
        
        x<-as.integer(x) int[1:6] 0 1 2 3 4 5 
        
        x<-as.logical(x) logi[1:6] False true true 
        
        logical --> integer TRUE는 1 FALSE는 0 
        
        x<-as.integer(x) int[1:6] 0 1 1 1 1 1 
        
        x<-c("aa","bb","cc")
        x<-as.integer(x) 에러 발생
        
        x<-as.numeric(x) NA NA 읽을 수 없는 형태로 바뀐다.
        
        #자료구조 변환
        x<-0:5
        str(x)
        x<-as.data.frame(x)
        'data.frame': 6obs of 1variable 
        $x : int 0 1 2 3 4 5 
        
        x<-as.list(x)
        list of 1
        
        
        x<-as.matrix(x)
        
           [1]
        [1] 0
        [2] 1 
         . .. . 
         
        Bloodtype <- C("a","ab","o")
        bloodtype <-factor(bloodtype) 
        
        levels : A AB B O 이 범주안에 들어 있는 데이터다 범주가 표현된다. factor 형 
        
        nlevels(bloodtype) 범주의 갯수를 센다. 
        
        x<-c("m","m","f","m","f"
        x<-factor(x)
        
        str(x) 결과 Factor W/ 2 levels "F","M" : 2 2 1 2 1 
        x<-as.integer(x)
        
        int[1:5] 2 2 1 2 1 
        
       #날짜 데이터 
       today<-Sys.Date() 2018-10-18
       now<-Sys.time() 2018-*10-18 23:20:26 KST
       
       date() Thu OCT 18 23 24 26 2018
       
       #문자열 날짜를 date type으로 변환하기 
       #ad.date(), strptime()
       
       x1>-"2018-10-10"
       as.Date(x1)
       
       as.Date(x,1 format="%Y-%m-%d")
       
       as.Date("02/05/2018", "%m/%d/%Y")
       2018-02-05
       
       as.Date("2018-05-05")
       
       as.Date("2018년 10월 10일","%Y년%m월%일") -> 2018-10-10
       
       as.Date("20181010", "%Y%m%d") format으로 앞 데이터가 어떻게 구성되어있는지 알려준다. 
       
       format(today, format="%Y년 %m월 %d일") -> 2018년 10월 18일 
       
       as.Date("081010", "%y%m%d") 년도가 2글자니까 소문자 y로 4글자는 대문자 Y 
       
       format(Sys.Date(), '%a') 목 
         
        
    
[7] 그래픽 기능
  1) 산점도 (sactter plot)
    # X축과 Y축으로 이루어진 그래프에 두변수의 값을 점으로 나타낸 그래프 
    plot(x,y)
    
    #R에서 확인 
    group<-c(1,1,1,2,2,2,2,2,1,1,2,1)
    age<-c(12,15,28,22,40,33,31,38,12,30,25,19)
    weight<-c(30,45,58,50,61,65,50,51,28,62,50,40)
    
    dat<-cbind(group,age,weight) : 행렬화됨
    
    plot(x=age,y=weight) : 이렇게 하면 산점도 그래프가 생성된다. 
    
    plot(formula=weight~age, date=dat) - 축이름 설정됨?
    
    plot(formula=weight~age, date=dat, main="scatter plot") 표의 제목 생성됨 
    
    plot(formula=weight~age, date=dat, main="scatter plot", xlab="age(seoul), ylab="weight()) : y축과 x축의 이름 추가 
    
    plot(formula=weight~age, date=dat, col=c("red","blue")[group]) 그룹별 색상을 나타낼 수 있음 
    
  2) 산점도 행렬 
    pairs(x,...)
    
    #각각의 산점도를 한눈에 살펴 볼 수 있도록 확장한 산점도 행렬
    #pairs() 함수 
    
    pairs(dat) 하면 총 9칸이 나오고 6개의 그래프가 나오고 다양한 각도로 산점도를 볼 수 있다.    
       
    
  3) 히스토그램과 상자그림 
    hist(x) / boxplot(x)
    
    #R에서 확인
    #hist(x)
    
    height<-c(182,160,165,170,163,160,181,166,159,145,175)
    hist(height) 히스토그램 생성됨 
    
    #상자그림 
    #boxplot(x) 
    
    boxplot(height) 4분위 표시 윗부분 최대값/ 아랫부분 최소값 가운데 선 - median /  1사분위수 / 3사분위수 표현됨 
    
    
[8] ★ 데이터마트 (2문제 이상 출제 - reshape 한문제 / plyr한문제)
  1) R reshape의 활용
    - reshape 패키지에는 melt()와 cast()라는 2개의 핵심 함수 사용 
      install.packages("reshape2")
      library(reshape2)
      head(airquality)
      
      melt(airquality, id=c("Month", "Day"), na.rm=T)※ 결측치값을 없애고 재구성할 것이냐? - na.rm
      cast()
      
      #R에서 확인 
       install.package("reshape2") 
       Library(reshape) # 라이브러리 불러오기
       data(airquality) #데이터 불러오기
       head(airquality) # 어떤 변수가 있는지 확인하기 
       names(airquality) #변수명을 알고 싶을 때 사용하는 명령어 
       names(airquality)<-tolower(names(airqulaity) 전부 소문자로 바꾸는 명령어 
       
       T<-melt(airquality, id=c("month", "day"), na.rm=T) 결측값은 제거 하겠다. 
       month와 day를 기준으로 정렬해준다. 오존부터 쭉 나온다. 
       
       #cast(데이터, 행레이블~열레이블~값) 
        cast(T, day~month~variable)
        Ozone에 해당하는 것을 행렬로 보여준다. 
          ozone
          5  6 7 8 
         1
         2
         3
      
         acast(T, day~month~variable)
         
         aqm<-acast(T,month~variable, mean)
         월에 해당하는 베리어블의 평균값을 볼 수 있다. 
         
         f<-cast(T, month~variable, range)
         해당 베리어블의 최대 최소값을 구할 수 있다. x1은 최소치 x2는 최대값 
         
         #sqldf 분석 SQ에서 시퀄문을 이용한 분석 방법 
          - 마트 9 27분 부터 다시 보기 
      
  2) plyr
     - apply 함수에 기반해 데이터와 변수를 동시에 배열로 치환하여 처리하는 패키지다.
     split-apply-combine ; 데이터를 분리-처리-다시결합하는 등 필수적인 데이터 처리기능 제공
     데이터 처리 함수 (입력데이터형식)(출력데이터형식) ply
     
[9] 데이터 테이블
  1) R의 기본 데이터구조인 데이터 프레임을 대신하여 사용할 수 있다.
  2) 기존 data.frame 방식보다 월등히 빠른 속도 (최소 20배) 
    - 특정 colum 을 key값으로 색인을 지정한 후 데이터를 처리하기 때문
    - 빠른 그루핑과 정렬, 짧은 문장 지원 측면에서 데이터 프레임보다 유용하다.
    
[10] 결측값 처리와 이상값 검색
  1) 결측값의 표현 : NA, ., 99999999, '', Unknown, Not Answer 등 결측값 표현
  2) NaN은 Not A Number로 결측값이 아니라 숫자형 데이턴데 숫자 외의 문자가 오는 경우 
  3) 결측값에 너무 시간낭비하지 말기!
  4) 결측값 자체가 의미있는 경우도 있다. 
     - 쇼핑몰 가입자 중 거래가 아예 없는 경우
     - 인구 통계학적 데이터에서, 아주 부자이거나 아주 가난한 군집의 데이터가 없는 경우
  5) 결측값 처리가 전체 작업속도에 많은 영향을 준다. 
    - 이상값 검색 > 꼭 제거하는 것은 아님, 분석의 목적/종류에 따라 적절히 변환/제거 등 
  6) 결측값이 있는 자료의 평균 구하기 
    - mean(c(1,2,3,NA)) 이렇게하면 평균 자체가 NA
    - mean(c(1,2,3,NA), na.rm=T) 결측값을 제거해버리고 3개로 평균을 계산함 
  7) 결측값 처리 방법
     - 단순 대치법
      a. 평균대치법
      b. 단순확률 대치법
     - 다중 대치법
  8) 이상값(Outlier) 찾기와 처리
     - 이상값(Outlier) 
       - 실수로 잘못 입력한 경우
       - 의도하지 않게 입력되었으나 분석 목적에 부합하지 않아 제거해야하는 경우
          --------여기까진 bad data로, 삭제하는 것이 바람직--------------\
       - 의도하지 않은 현상이지만, 분석에 포함해야하는 경우
       - 의도된 이상값인 경우 (fraud, 불량)
       
  9) 이상값의 인식방법
    - ESD(Extreme Studentized Deviation) : 평균에서 3표준편차 떨어진 값(3시그마) 
    - 기하평균 - 2.5x 표준편차 <data <기하평균 + 2.5 x 표준편차인 경우 
    - 사분위수의 Q1,Q3로부터 2.5*IQR 이상 떨어져있는 데이터
    
  10) 극단값 절단(Trimming) 방법
"""
