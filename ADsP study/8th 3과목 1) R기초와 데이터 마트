"""
[1] R소개
  1) 데이터 분석 도구의 현황
    - 다른 프로그램에 비해 R의 사용이 증가하고 있다.
  2) R의 탄생 
    - R은 오픈 소스 프로그램으로 통계, 데이터 마이닝과 그래프를 위한 언어
    - 다양한 최신 통계분석과 마이닝 기능을 제공
    - 세계적으로 사용자들이 다양한 예제를 공유
    - 다양한 기능을 지원하는 5000개에 이르는 패키지가 수시로 업데이트
    
  3) 분석도구의 비교 
                                        SAS                    SPSS                     R
    - 프로그램 비용                   유료, 고가               유료, 고가               오픈소스, 무료
    - 설치용량                       대용량                    대용량                  모듈화로 간단
    - 다양한 모듈 지원 및 비용        별도 구매                 별도 구매                오픈소스
    - 최신 알고리즘 및 기술반영       느림                       다소 느림               매우 빠름
    - 학습자료 입수의 편의성          유료 도서 위주             유료 도서 위주           공개 논문 및 자료 많음 
    - 질의를 위한 공개 커뮤니티       NA                         NA                     매우 활발 
    - 유지보수                       쉽다                        쉽다                  어렵다
    
  4) R의 특징
    - 오픈소스 프로그램 
      : 사용자 커뮤니티에 도움 요청이 쉽다
        약 5000개의 패키지가 수시로 업데이트 된다.
    - 그래픽 및 성능
      : 프로그래밍이나 그래픽 측면 등 대부분의 주요 특징들에서 상용프로그램과 대등하거나 월등하다.
    - 시스템 데이터 저장 방식
      : 각 세션 사이마다 시스템에 데이터셋을 저장하므로 매번 데이터 로딩할 필요없고 명령어 히스토리 저장 가능하다.
    - 모든 운영체제
      : 윈도우, 맥, 리눅스, 운영체제에서 사용가능하다.
    - 표준 플랫폼
      : S통계 언어를 기반으로 구현된다.
        R/S 플랫폼은 통계 전문가들의 사실상의 표준 플랫폼이다.
        
  5) 객체 지향언어 이며 함수형 언어
    - 통계 기능 분만 아니라 일반 프로그래밍 언어처럼 자동화하거나 새로운 함수를 생성하여 사용가능하다.\
    - 객체지향 언어의 특징
      : SAS, SPSS 회귀분석 시 화면에 결과가 산더미로 나온다. 대신 R은 추정계수, 각각의 표준오차, 잔차등
        결과값인 객체를 반환한다. 필요한 부분을 프로그래밍으로 골라 추출하여 활용가능하다.
    - 함수형 언어 특징
      a. 더욱 깔끔하고 단축된 코드
      b. 매우 빠른 코드 수행속도 
      c. 단순한 코드로 디버깅 노력 감소
      d. 병렬 프로그래밍으로의 전환이 더욱 용이
  
  6) R스튜디오 
    - 오픈소스이고 다양한 운영체계를 지원한다.
    - R스튜디오는 메모리에 변수가 어떻게 되어 있는지와 타입이 무엇인지를 볼 수 있고,
      스트립트 관리와 도큐먼데이션이 편리하다.
    - 코딩을 해야하는 부담이 있으나 스크립트용 프로그래밍으로 어렵지 않고 쉽게 자동화 가능하다. 
   
     Script / Environment/History   /. console   / Files, Plot , Packages, Help, Viewer
     Ctrl + Enter 누르면 실행?

[2] R설치
   - https://www.r-project.org
   
[3] R의데이터 구조
  1) 벡터 방이 있고, 방 각각에 들어간 것을 스칼라라고 한다. 
  2) 행렬
  3) 배열
  4) 데이터프레임
  5) 리스트
   # : 주석처리 '문자' 변수선언 ex) vector1 <- C(1,2,3,4) / vector = c(21,22,23)
   ※ =보다는 <- ※여기서 c는 c함수를 이용한다는 의미 
   indexing vector1[1]
   
   R에서 코딩친거 예제 
   # ★ 벡터 시험에 자주 나온다. 
   c(1,2,3,4)
   c('a','b','c')
   vector1 <- c(11,22,33)
   vector1
   
   vector2
   vector2=c(21,22,11)
   
   vector2[2] : vector2의 2번째 항목을 가져옴 
   vector2[1] : vector2의 1번째 항목을 가져옴 ※python은 0번부터 시작하지만 R은 1번부터 시작한다. 
   
   aa<--c(33,44,55,66,77) 
   aa[-3] : 55요소를 생략한 나머지 값을 불러 온다.
   aa[-1:-2] : 1~2번을 제외하고 나머지 값을 불러 오겠다. 
   aa[2:4] : 2~4번까지 해당하는 값을 가져오겠다. 
   aa[3]<-100 : 3번방을 100으로 변경하겠다. 
   
   # 새로운 내용을 벡터에 추가 
   aa<- c(aa,200) : aa라는 요소 뒤에 200을 추가 하겠다. 
   
   aa[9] <- 99 : 6개방 중에 9번째 방에 99를 넣는다? 7,8번째 방은 NA라고 처리되고 9째 방에 99가 설정된다. NA=결측치
   
   append(aa,11111) 끝에 요소를 추가하는 함수이고, 
   aa만 치게 되면 11111 이 추가되어 있지 않다. 
   
   append(aa, 5454, after = 4) : 4번째 방 뒤에 요소 추가 
   append(aa, 1111, after = 0) : 맨 앞에 요소를 추가하고 싶다. 
   
   z<-c(TRUE, FALSE) 불릿값을 넣을때는 대문자로 넣어줘야 한다.! 
   
   # 벡터 연산 
    c(1,2,3)+c(4,5,6) : 결과값 - 5,7,9
    c(1,2,3)+1 결과값 : 2,3,4 (각 결과값에 1을 더해준다.)
    x<-c(1,2,3)
    y<-c(2,3,4)
    x+y 결과값 : 3,5,7
    
    c(1,2,'a') : 문자로 인식
    
    # 벡터의 길이를 얻는 함수 
    length() 
    
    length(x) : 결과값 3 (x는 3개가 있는 함수) 
    
   # Matrix (행렬)
   # matrix()함수 사용
   
   m<-matrix(c(1,2,3,4))  : 1열 4행짜리 행렬 생성
   m2<-matrix((c(1,2,3,4),nrow=2) : 2열 2행까지 행렬 생성 (nrow = 2 -> 2행 짜리로 만들겠다)
   m3<-matrix((c(1,2,3,4,5,6),ncol=2) : 2열 3행까지 행렬 생성 (ncol=2 -> 2열짜리로 만들겠다.)
   
   #행우선으로 입력하고자 할 경우에는 byrow=T 설정한다.
   
   m4 <-matrix(c(1,2,3,4,5,6),nrow=2,byrow=T)
   3열 2행으로 생성됨
   
   #컬럼의 이름을 지정
   m5<-matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=T) 3열 3행함수 생성
   
   colnames(m5) <- c('A','B', 'C')
   
   하면 열의 이름이 지정된다. 
   
  # 행 추가 함수 rbind() 함수
  m5 <- rbind(m5, c(10,11,12)) : 4행에 10,11,12추가됨
  m5 <- rbind(m5, c(11,2,22,33)) : 에러 갯수가 맞아야 한다. 33을 빼고 22까지만 들어간다.. 
  
  # 열 추가 함수 cbind() 함수 
  m5 <-cbind(m5, c(11,11,11,11))
  
  # 배열 (다차원 형태의 데이터) 행렬(2차원 데이터) ※열 우선 방식
  array (1:9, dim=c(3,3)) : 1부터 9의 숫자로 3행 3열의 배열을 만들겠다. 
  array(1:12, dim=c(2,2,3)) : 1부터 12의 숫자로 2행 2열의 행렬을 3개 만들겠다.
  ,,1             ,,2               ,,3
       [,1][,2]            [,1][,2]           [,1][,2] 
  [1,]   1   3        [1,]    5   7      [1,]    9  11
  [2,]   2   4        [2,]    6   8      [2,]   10  12
  
  # 데이터 프레임 # 데이터 마트-3 5분 부터 보기 
   
[4]
     
"""
