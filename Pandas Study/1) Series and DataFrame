#Pandas란?
"""
- 데이터 처리 및 분석을 위한 라이브러리
- 대용량 데이터를 안정적이면서도 간편하게 처리
- 서로 다른 데이터타입으로 열을 구성할 수 있음 (열단위로 다른 데이터 / 같은 열에서는 같은 데이터 타입이어야 한다.) 
(참고) Numpy : 전체 배열 원소를 동일한 타입으로 제한
- 주요 기능
    - 데이터 입출력 : csv, excel, RDB, JSON 등 다양한 포맷의 데이터를 효율적으로 처리할 수 있는 형식을 사용
    - 데이터 가공 : 분리, 결합, 계층, ★피봇 등
    - 통계 분석 처리
- 기본 2차원 배열 
- ★피봇이 가장 중요

#### 자료형
- Series

    - 1차원 배열과 유사한 자료형
    - 색인(index) : 행 번호
        - 각각의 데이터에 부여하는 속성으로 기본값은 0부터 1씩 증가하는 숫자 지정
        - index 파라미터를 통해 새로운 값으로 변경 가능
        - 리스트, 튜플 타입으로 새로운 값을 전달해야하며 다차원 자료형은 사용할 수 없음
        - 전달하는 색인의 개수와 데이터의 개수가 일치해야 함
    - 각각의 색인과 데이터가 매핑되어 있으므로 dictionary 자료형과 유사
    - 여러 가지 데이터 타입 사용 가능
    - 라벨링 가능 

"""

# pandas 라이브러리 및 Series, DataFrame 네임스페이스 불러오기

import pandas as pd

# 빈 Series 생성 - Series로 변환하는 함수  ※np.array()랑 비슷 
pd.Series()
#결과값 : Series([], dtype: float64)

"""
### Series 생성

- 하나의 값(숫자, 문자) 또는 자료형(리스트, 튜플, np 배열)으로 데이터 전달

### Series 속성

- 속성은 소괄호를 붙이지 않음
- index : series 객체의 인덱스 배열을 반환
- values : series 객체의 데이터(값) 배열을 반환
- name : series 객체의 이름을 반환 
- dtype : series 객체의 데이터 타입을 반환
- size : series 객체의 데이터 개수(길이)를 반환
- shape : series 객체의 구조(행, 열, 차원)를 반환
"""

# 숫자 10을 데이터로 가지고 잇는 Series
# 결과 해석
# 왼쪽 0 = 자동으로 생성되는 기본 인덱스번호 (0부터 시작)
# 오른쪽 10 = 입력한 데이터 값

s1 = pd.Series(10)
s1 
# 결과값 : 0    10  dtype: int64

s2 = pd.Series([10,20,30,40])
s2

"""
결과값 

0    10
1    20
2    30
3    40
dtype: int64
"""

# 데이터 확인 - Numpy 배열로 나온다 
s1.values

# 결과값 : array([10], dtype=int64)


# 인덱스 번호 
# RangeIndex : 기본적으로 생성되는 인덱스 번호를 지칭

s1.index #라벨링이 안된 경우 결과값 : RangeIndex(start=0, stop=1, step=1)

print(s2.values,s2.index) #결과값 : [10 20 30 40] RangeIndex(start=0, stop=4, step=1)

# 문자 
s3 = pd.Series('abc')
s3 #결과값 : 0    abc   dtype: object

# 데이터 확인
s3.values # 결과값 : array(['abc'], dtype=object)

# 인덱스 확인 
# 0이상 3미만의 RangeIndex : 0,1,2,3
s2.index #결과값 : RangeIndex(start=0, stop=4, step=1)

# 데이터타입이 서로 다른 리스트 자료형

s4 = pd.Series([10.3,'test',200,[1,2,3]])
s4

# dtype : object라는 최상위데이터타입으로 치환이 되서 들어 간다.  
# but object는 속도가 느려진다. 따라서 이렇게 안 쓰는게 좋다. 
"""
결과값 
0         10.3
1         test
2          200
3    [1, 2, 3]
dtype: object
"""

# 데이터 확인
s4.values # 결과값 : array([10.3, 'test', 200, list([1, 2, 3])], dtype=object)

# 인덱스 확인
s4.index # 결과값 : RangeIndex(start=0, stop=4, step=1)

# 튜플 자료형

s5 = pd.Series((1,2,3,4,5.0))
s5
#int를 float로 바꾸면 되니까 float으로 변경함 

"""
결과값 

0    1.0
1    2.0
2    3.0
3    4.0
4    5.0
dtype: float64
"""

# 데이터 확인

s5.values # 결과값 : array([1., 2., 3., 4., 5.])
s5.index #결과값 :  RangeIndex(start=0, stop=5, step=1)

# 딕셔너리 자료형 (자동으로 라벨이 인덱스에 부여됨)
s6 = pd.Series({'a':10,'b':20,'c':30})
s6

#0 1 2 가 없는 상황은 아니다 

"""
결과값 
a    10
b    20
c    30
dtype: int64
"""

#데이터 확인
s6.values  #결과값 : array([10, 20, 30], dtype=int64)

# 인덱스 확인 (RangeIndex가 아니라 다른게 나옴 )
s6.index #Index(['a', 'b', 'c'], dtype='object')

# 인덱스 새롭게 지정하기
# 인덱스 속성을 참조하여 리스트, 튜플 타입으로 전달
# 라벨 인덱스가 없던 경우 -> 새롭게 추가 
# 라벨 인덱스가 있던 경우 -> 덮어쓰기

s5.index  # 결과값 : RangeIndex(start=0, stop=5, step=1)

# 인덱스를 새롭게 지정할때는 RangeIndex 범위만큼의 길이를 가지는 리스트를 사용
# 행 개수(데이터 개수)와 동일한 길이를 전달해야 한다.

s5.index=[2010,2011,2012,2013,2014]
s5.index

"""
결과값 
2010    1.0
2011    2.0
2012    3.0
2013    4.0
2014    5.0
dtype: float64
"""

# 인덱스를 지정하여 객체 생성
# 인덱스 객체에 대해서 인덱스 인덱스번호로 아이템 창조 가능

s5.index # 사용자가 만든거라 int라서 나온다  : Int64Index([2010, 2011, 2012, 2013, 2014], dtype='int64')

s5.index[0] #결과값 : 2010

# 인덱스 객체 내부의 단일 자료만 변경 불가 -> 다시 리스트로 바꿔 줘야 한다?
s5.index[-1]=2015 # 결과값 : TypeError: Index does not support mutable operations

# 인덱스 라벨링을 바꿀때는 전체 인덱스를 변경해야한다.
s5.index=[2010,2011,2012,2013,2015]
s5

"""
결과값
2010    1.0
2011    2.0
2012    3.0
2013    4.0
2015    5.0
dtype: float64
"""
# Series 함수의 index 파라미터에 값을 지정해서 딕셔너리를 대신할 수 잇다.
# Series(data, index=[...])

s7=pd.Series([10,20,30,40], index=["mon",'tue','wed','thur'])
s7
"""
결과값
mon     10
tue     20
wed     30
thur    40
dtype: int64
"""
# 데이터 확인
s7.values #array([10, 20, 30, 40], dtype=int64)

s7.index #Index(['mon', 'tue', 'wed', 'thur'], dtype='object')

# 사용자 부여 인덱스로 조회 
s7['wed'] # 결과값 : 30

# 자동 부여 인덱스로 조회 
s7[0] #결과값 : 10

### dictionary 자료형과 유사한 Series 자료형 

# dictionary 자료형으로 series 생성

data = {'서울':100,'경기':200,'강원':300,'부산':400}
sample = pd.Series(data)
print(data)
print(sample)

"""
결과값
{'서울': 100, '경기': 200, '강원': 300, '부산': 400}
서울    100
경기    200
강원    300
부산    400
dtype: int64
"""

# Series 객체와 in 연산자
# dictionary 와 유사 : in 연산자를 사용해 내부 검사시 
# key값에 해당하는 라벨이 있는지 없는 여부를 True False로 출력 (데이터와 무관)

print('서울' in data) # key값 조회 : 결과값 True
print('서울' in sample) # 라벨 조회  : 결과값 : True
print(100 in data) #r결과값 : False

# for 문에서 in 연산자로 접근 : Series의 values값을 참조 

for key in data:
    print(key)
print("-")
for i in sample:
    print(i)
"""
결과값
서울
경기
강원
부산
-
100
200
300
400
"""   
# 주의 사항 : dictionary는 key값을 출력하지만, Series는 value값을 출력해준다.

# 서울, 경기, 강원, 부산 => 서울, 경기, 강원, 제주로 라벨 인덱싱 변경
# 지정한 Index 기준으로 Series 생성
# 사용하는 인덱스에 없는 값은 Series에 NaN값에 저장
# NaN : Not a Number(결측치) -> numpy에서 사용함
# None : 결측치(파이썬에서 사용함)
index2= ['서울','경기','강원','제주']
sample2 = pd.Series(data,index=index2)
sample2

# 부산 400 인데, 제주 400으로 안변하고, 제주 NaN으로 표시, data에 제주에 대한 값이 없었으니까 
# data에 value만 있었으면 제주에 400이 부여됐을텐데, 이미 key : value가 부여 되어있었는데, 제주에 조회되는 값이 없어서 NaN
"""
결과값
서울    100.0
경기    200.0
강원    300.0
제주      NaN
dtype: float64
"""

### 인덱싱(Indexing) 

#- 하나의 특정 값을 선택하거나 변경
#- 참조하는 인덱스 : 기본 숫자 인덱스, 라벨 인덱스
#- 새로운 인덱스를 설정해도 기본 숫자 인덱스 사용 가능

s6 

"""결과값
a    10
b    20
c    30
dtype: int64
"""
# Series s6의 첫 번째 데이터 => 인덱스 0으로 조회
print(s6.index[0]) #0번째 요소의 라벨은 'a0'
print(s6[0]) #0번쨰 요소의 데이터는 10 
print(data[0])#dictionary는 이 명령어가 불가능

# Series s7의 인덱스 0값을 조회
print(s7[0])
print(type(s7['mon']))

"""
10
<class 'numpy.int64'>
"""

# Series s7의 인덱스 tue에 해당하는 데이터 값을 변경
# 인덱스(라벨링)은 개별적으로 하나하나 변경 불가능
# 그러나 데이터는 하나하나 인덱싱을 이용해 변경가능

s7['tue']=200
s7

"""
mon      10
tue     200
wed      30
thur     40
dtype: int64
"""

# 시리즈에서 원하는 로우(행)만 조회하기 : 조회할 로우명을 리스트로 묶어서 전달
# Series s7에서 mon, wed 라벨 조회
# 이중 리스트를 사용해야함 -> s7['mon','wed'] #에러 발생

s7[['wed','mon']]

"""
wed    30
mon    10
dtype: int64
"""
s7['wed','mon'] #key error?

# 여러개의 인덱스를 조회할때는 리스트만 사용가능하다. 튜플 불가
s7[('mon','wed')] # KeyError: ('mon', 'wed')

### 슬라이싱(Slicing)
#- Series 객체[시작인덱스:끝인덱스:간격]
#- 특정 범위의 값을 선택하거나 변경
#- 기본 숫자 인덱스 또는 새로운 인덱스 모두 사용 가능
#- 기본 숫자 인덱스를 사용해서 슬라이싱 할 때는 끝 인덱스 미포함
#- 라벨 인덱스를 사용해서 슬라이싱 할 때 끝 인덱스까지 모두 포함 

# 인덱스 0에서 인덱스2(포함)까지 조회

s1 = pd.Series([10,20,30,40,50], index=list('abcde'))
s1

# RangeIndex : 0,1
s1[0:2]

# 라벨 'a'에서 라벨 'c' 조회(포함)
s1 ['a':'c']

# 0~3번째까지 2개 간격으로 인덱싱

s1[0:4:2]

# 인덱스 'a' 에서 인덱스'c'(포함)까지 2개 간격으로 조회
s1['a':'c':2]

#조건 색인(Boolean Indexing)
#객체에 벡터와 스칼라 연산을 적용하여 True인 데이터만 반환

# 양수와 음수의 데이터를 저장하고 있는 Series 생성
# 양수 : 10기준으로 위 아래 

s2 = pd.Series([10,-3,14,70,-44,-18,-5,1,-2,12,5])
s2

#음수인 데이터는 True로, 양수인 데이터는 Flase로 만들기
s2<0

# 위의 조건색인을 이용해 s2중 음수인 자료만 남겨주세요
s2[s2<0]

# 두 개 이상의 조건 병렬형태로 처리하기
# 양수이면서 10보다 작은 값만 조건색인으로 남겨주세요
s2[(s2<10) & (s2>0)]

"""
산술연산
series 객체와 스칼라 값의 산술연산 => BroadCasting
series 객체 간의 산술연산
인덱스의 라벨이 동일한 것끼리 연산 수행, 공통으로 존재하지 않는 경우 NaN 반환
라벨이 없는 경우 차례대로 연산 수행, 개수가 동일하지 않는 경우 NaN 반환
fill_value 인자를 통해 NaN이 아닌 특정 값으로 대체 가능

연산의 종류
더하기 : +, add() 메서드
빼기 : -, sub() 메서드
곱하기 : *, mul() 메서드
나머지 : / , divide() 메서드
나머지만 반환 : %
몫만 반환 : //
"""

# 라벨 : a,b,c,d -> 데이터 4개
# 라벨 : a,c,d,e,f,g -> 데이터 6개

s1 = pd.Series([1,2,3,4], index=list('abcd'))
s2 = pd.Series([10,20,30,40,50,60],index=list('acdefg'))

s1
s2
s1+s2
# Series 객체와 스칼라 값의 산술연산
s1 * 3

#Series 끼리 더하기
# 공통라벨인 a,c,d에만 값 부여, 나머지는 NaN

s1 + s2

# fill_value 파라미터 : 공통으로 존재하지 않는 라벨에 대한 NaN 대신
# 적용할 특정 값을 지정할 수 있다.
# Series 메서드를 사용할떄의 파라미터로 입력가능

s1.add(s2, fill_value=0)
s1.sub(s2, fill_value=100)

# Series 객체 간의 곱하기 연산
s1 * s2
s1.mul(s2,fill_value=1)

# Series 객체 간의 나누기 연산
s1 / s2
s1.divide(s2, fill_value=1)

# Series 객체 간의 나머지 반환 연산
s1 % s2

# Series 객체 간의 정수 몫 반환하기 
s1 // s2

#연습 문제
#1. 실습 데이터 생성 : 1100(미만) 사이의 랜덤 정수 값을 26개 저장한 Series를 생성하고 AZ까지의 알파베스로 라벨링 설정

import numpy as np
data = np.random.randint(1,100,26)
data.size
data

s1 = pd.Series(data, index=list('ABCDEFGHIJKLNMOPQRSTUVWXYZ'))
s1

#### 2. 인덱스 라벨이 'K'값항목의 값 출력
s1['K']
#### 3. 인덱스 라벨이 'A','F','C'항목의 값 출력 (한꺼번에 모아서) [[]] 이중리스트로 처리! 
s1[['A','F','C']]
### 4, 5번 인덱스 부터 15번 인덱스까지의 항목 출력 (2가지 방법)
s1[5:16]
s1['F':'P']

#### 5. 뒤에서 5개 항목 출력
s1[-5:]

#### 6. data의 항목의 갯수를 출력
s1.size
len(s1)

#### 7. data 항목 값들의 평균보다 큰 항목만 출력
s1[s1>=s1.mean()]

(s1>s1.mean()).sum()
s1[s1>s1.mean()].mean()

#50을 s1의 인덱스중에 있는지 없는지 조회한다.
50 in s1

#값에서 50을 확인
50 in s1.values

# Series가 모여서 Dataframe을 만든다. DataFrame이 더 중요하다 
# 2차원으로 구성되어 있어 현업에서 쓰는 데이터랑 유사하다. 

"""
DataFrame 생성¶
2차원 배열과 유사한 자료형
다차원 리스트, 딕셔너리 자료형으로 데이터 구성 가능
관계형 데이터베이스의 테이블 구조, excel/csv 데이터 구조와 유사
하나의 컬럼은 하나의 Series로서 하나의 Dataframe은 여러 개의 Series 묶음으로 구성됨
index 특징
row index(행 인덱스) : 기본 숫자형 인덱스가 아닌 새롭게 지정한 로우명(라벨) 인덱스를 사용해도 기본 숫자형 인덱스를 함께 사용할 수 있음
column index(열 인덱스) : 새롭게 컬럼명(라벨) 인덱스를 사용하면 기본 숫자형 인덱스는 사용할 수 없음
"""

# 다차원 자료형, 딕셔너리 자료형을 사용한다
# 주의점 : 자료형에 따라 아이템 길이 이슈가 발생 할 수 있음
# 다차원 리스트 : 아이템 길이가 동일/서로 다른 타입
# 딕션리 : 아이템 길이가 동일/서로 다른 타입

# 데이터 프레임의 셀(튜플)에는 모든 데이터 타입 및 여러 타입 혼합 가능
# 다차원 리스트 : 아이템 개수 3개, 하위 아이템 개수 4개 
data1 = [[1,2,3,4],['a','b','c','d'],[0.1,0.2,0.5,0.8]]
data1

# 아이템 3개 : 행 3줄 -> df에 저장하는 데이터 개수
# 하위 아이템 4개 : 열 4줄 -> df에 저장하는 데이터의 속성/변수의 개수 
df1 = pd.DataFrame(data1)
df1

# 아이템 길이가 다른 다차원 리스트 
# 최대 길이의 행을 기준으로 df구조가 생성됨
# 길이가 모자란 튜플(셀) : NaN 값으로 채워짐

data2 = [[1,2,3,4,5],['a','b'],[0.1,0.2,0.5]]
df2=pd.DataFrame(data2)
df2

# 아이템 3개, Value의 길이 4개 => 아이템의 개수(컬럼의 개수), value의 길이 (로우의 개수)
data3 = {'a':[10,20,30,40],
        'b':[1,2,3,4],
        'c':[5,6,7,8]}
df3=pd.DataFrame(data3)
df3

# 딕셔너리 자료형을 데이터 프레임의 데이터로 사용할때는
# 아이템 개수 3개, value길이 다르게 
# 개수가 모자란 튜플(셀) : ValueError => key에 해당하는 value의 길이가 모두 동일해야함 

data4 = {'a':[10],
        'b':[1,2,3,4],
        'c':[5,6,7]}
df4=pd.DataFrame(data4)
df4
#ValueError: arrays must all be same length

# 인덱스를 지정하여 객체 생성 : DataFrame 함수에서 파라미터로 지정
# column 파라미터 : 컬럼명(열 개수와 동일한 길이를 가진 리스트 전달)
# index 파라미터 : 로우명(행 개수와 동일한 갈이를 가진 리스트 전달)
df5=pd.DataFrame(data1,index=['r1','r2','r3'],columns=['c1','c2','c3','c4'])
df5

data3 #column명만 있고, row명은 없다
# 딕셔너리를 이용했을때 컬럼 순서를 변경하여 df 생성 가능 
df6 = pd.DataFrame(data3,index=list('wxyz'),columns=list('cab'))
df6

# data에 없는 인덱스를 전달하는 경우 : 없는 key에 대해서 컬럼을 생성, 값은 NaN으로 
df7 = pd.DataFrame(data3, columns=list('abd'))
df7

#data와 일치하지 않는 index개수를 전달하는 경우 :

df8 = pd.DataFrame(data3, index=[10,20,30,40,50])

#ValueError: Shape of passed values is (4, 3), indices imply (5, 3)
# 4개를 줘야하는데, 50개 줘서 error 발생

#딕셔너리 타입 데이터로 데이터 프레임 생성
#서울, 경기, 충청,경상, 전자 지역에 대해 2016,2017,2018 유입인구 
data = {'서울':[150,180,300],
       '경기':[20,240,450],
       '충청':[-10,3,-13],
       '경상':[10,20,30],
       '전라':[5,6,7]}

sample = pd.DataFrame(data)
sample

# 행 인덱스 : 행개수와 동일하게 리스트 전달
sample.index=[2016,2017,2018]
sample

# 참고 : 행 인덱스에 이름 부여 
sample.index.name = 'year'

# 열인덱스 
sample.columns.name='location'
sample

# 행 인덱스 (로우) 수정
# 속성값
# 1. 행의 개수와 동일한 리스트를 전달
# 2. 속성값으로 사용하는 인덱스 객체는 아이템 수정 불가(하나의 인덱스만 따로 수정 불가)
sample.index=[1991,1992,1993]
sample

sample.index[1]=1991 #TypeError: Index does not support mutable operation

# 값을 수정한 경우는 이름을 다시 부여한다. 이차원 리스트 자체가 변경되어서 
sample.index.name='year'
sample

import pandas as pd
import numpy as np

data = {"서울":[150,180,300],
       "경기":[200,240,450],
       "충청":[-10,3,-13],
       "경상":[10,20,30],
       "전라":[5,6,7]}

sample = pd.DataFrame(data)
sample

sample.index = [1991,1992,1993]
sample.index.name= 'year'
sample.columns.name = 'location'

sample

# 첫번째 행 (로우) 조회 : 0번 인덱스 참조
# 반환값 : Series  (Series가 모여서 DataFrame이 되어서 반환값이 Series)
# 라벨 인덱스 : 기본 데이터프레임의 컬럼
# Series name : 기존 데이터프레임에서 참조한 첫 번째 행의 라벨 인덱스
sample.iloc[0] #index location - row가 나온다. row를 index 번호로 잡겠다. 

#라벨명으로 조회 : 1992로 행 조회 
sample.loc[1992] #라벨명으로 조회할때는 loc

# 여러개의 열(column) 조회 : 리스트로 묶어서 전달 (서울,경기)
sample['서울'] # DataFrame 만들때 key값이 column 이름이었으니까 딕셔너리 조회하듯이 한다. 

sample[['서울','경기']]

# 서울 경기지역의 1992년 데이터만 조회
sample[['서울','경기']].loc[1992]
sample[['서울','경기']].iloc[1]

sample.loc[1992][['서울','경기']] #1992년을 먼저 조회해놓고 서울/경기로 조회 해도 된다. - 순서가 중요한건 아니다. 

# 여러개의 행 조회(1991,1993년 한꺼번에 조회) #여러개를 조회할때는 리스트로 전달! 이중 리스트! 하나 조회할때도 그냥 이중리스트로
sample.loc[[1991,1993]] 
sample.loc[[1991]] # 이중리스트로 하면 표형태로 보여준다. 
sample.loc[1991]

# 1991, 1993년도의 데이터에서 충청도 데이터만 남기기
sample.loc[[1991,1993]][["충청"]]
sample.loc[[1991,1993]]["충청"] #이것도 이중리스트로 조회해야 표 형태로 나온다. 코드 일괄성을 위해 이중리스트로 처리하자 
sample.loc[[1991,1993]].get(['충청'])
#인덱싱은 손에 익을 정도로 완전 숙달이 되어야 한다. 

"""
슬라이싱
로우(행) 슬라이싱
순서가 있으며 로우 단독으로 슬라이싱 가능
기본 슬라이싱 문법은 기본 숫자형 인덱스를 기준으로 적용
기본 숫자형 인덱스로 슬라이싱할 때는 마지막 인덱스는 포함하지 않고 라벨 인덱스로 슬라이싱할 때는 마지막 인덱스를 포함
컬럼(열) 슬라이싱
순서가 없기 때문에 컬럼 단독으로 슬라이싱할 수 없음
라벨 기준으로 로우 기준 슬라이싱 결과에 대해 컬럼 슬라이싱 가능(기본 숫자형 인덱스는 적용 불가)
마지막 인덱스를 포함"""

# 기본 로우 슬라이싱 : df[start:end:step]
# 0번부터 1번까지 슬라이싱
sample[0:2]

# 0번 인덱스부터 2번 인덱스까지 2행 간격으로 슬라이싱 
sample[::2]

# 전체 로우에 대해 간격을 -1로 지정 : 행을 역순으로 나열
sample[::-1]

# 컬렁 슬라이싱 : 행에 대한 슬라이싱 결과에 열 슬라이싱 적용
# df[:,start:end:step]
# 기본 숫자형 인덱스 기준의 슬라이싱 -> 컬럼명으로 사용
sample.loc[:,:'경상']

sample[:,:'경상'] 이거는 Error

# 컬럼, 로우 인덱스 모두 기본 숫자형 인덱스인 경우
# 4 x 4 구조에서 모든 값이 0인 데이터 프레임 생성

data = np.zeros((4,4))
data

# df화를 시켜주세요
df = pd.DataFrame(data)
df

# 숫자형 슬라이싱 
# 컬럼, 로우 
df[:3][:2]

# Error -  하나의 대괄호 안에서 동시에 적용을 못한다. 
df[:,:]  # TypeError: '(slice(None, None, None), slice(None, None, None))' is an invalid key

# 1. 컬럼 슬라이싱에서 사용하는 인덱스 : 기본 번호 인덱스
# 2. 컬럼 슬라이싱 조건 : 로우 슬라이싱 결과에서만 가능
# 3. 메서드를 사용한 로우 슬라이싱 : iloc / loc -> 1번기준
df.iloc[:3,:2]
sample.iloc[:2,:2]

연습문제
아래와 같은 데이터프레임을 생성하고 출력화면과 동일한 결과를 생성하세요.
prac = {"Col1":[0,3,'ks01',2,5],
        'Col2':['big','data','is','very','good'],
        "Col3":[2.70,-5.00,2.12,8.31,-1.34],
        "Col4":[True,True,False,False,True]}
prac
df_prac = pd.DataFrame(prac,index=list('ABCDE'))
df_prac
# Col1, Col3 함께 조회
df_prac[['Col1','Col3']]
# A,C,D 로우만 조회하기
df_prac.loc[['A','C','D']]
df_prac.loc[list('ACD')]
# B,D 로우의 Col1, Col2만 조회하기
df_prac.loc[list('BD')][['Col1','Col2']]
df_prac.iloc[1:4:2,0:2]

"""
컬럼, 로우 추가
컬럼 추가 / 변경
컬럼 인덱싱 = 스칼라 값
컬럼 인덱싱 = 배열, 리스트(로우 개수와 아이템 개수 일치)
컬럼 인덱싱 = 컬럼 간의 연산
컬럼 인덱싱 = series
로우 추가
로우 인덱싱 = 스칼라 값
로우 인덱싱 = 로우 간의 연산
데이터 분석에서 컬럼과 로우의 의미
컬럼 : 변수(특성)
로우 : 개별 데이터(레코드)
전체 데이터를 구성하는 변수를 추가/삭제하는 일은 빈번하게 발생하지만 특정 인덱스를 기준으로 
전체 로우 데이터를 추가/삭제하는 일은 자주 발생하지 않으며 데이터 처리를 하는 과정에서 권장하지 않는 작업"""

# 제주 컬럼 추가, 모든 데이터는 1로 통일
# 딕셔너리 키: value 추가 하는 방법과 동일 
sample['제주']=1
sample

# 컬럼 추가 2 : 서로 다른 값을 가지는 데이터로 행을 구성하는 컬럼 추가
# 조건 : 전달하는 자료형(배열, 리스트)의 길이 = 행의 길이 
# 부산 칼럼 추가, 데이터는 1씩 증가하는 숫자를 가지는 배열 

sample['부산']=[5,6,7] # sample['부산']=list(range(5,8)) 도 됨 
                       # np.arange(5,8) 도 된다. 
sample

# 컬럼 추가 3 : 컬럼간의 연산 -> 파생변수 
# 수도권 : 서울 + 경기
sample['수도권']=sample['서울']+sample['경기']
sample

# 컬럼 추가 4 : Series 객체를 컬럼으로 전달
# 조건 : 추가 대상인 df의 구조와 추가 아이템인 Series의 구조를 파악해야함 
# 라벨 인덱스를 기준으로 Series 데이터와 df 데이터가 매핑
# 반드시 길이가 일치 하지 않아도 된다.
s1 = pd.Series([9,-99],index=[1991,1992])
s1
sample['강원']=s1
sample

# 인덱스명을 부여하지 않은 Series
s2 = pd.Series([100,100,300])
s2

# 데이터 개수가 동일해도 라벨 기준으로 매핑하기 때문에 값 전달이 이루어지지 않음 
# 로우명이 일치하지 않기 때문에 적용이 안된다. 다 NaN으로 입력 된다. 
sample['test']=s2
sampl

"""
로우추가
로우 인덱싱 = 스칼라 값
로우 인덱싱 = 로우 간의 연산
로우 인덱싱 = 자료형(배열,리스트/컬럼 개수와 아이템 개수 일치)"""

# 로우는 .loc를 이용해서 추가해준다.
# .loc가 붙는다는 점만 빼면 컬럼과 같다.
sample.loc[1994]=0
sample

# 배열, 리스트, 딕션리 : 로우 추가 가능한 자료형
# 컬럼개수와 아이템 개수를 일치시켜 전달 
# 0~9까지 1995칼럼에 추가 

sample.loc[1995]=np.arange(0,10)
sample

# 연도 로우를 1991~1995 -> 2001~2005로 변경
sample.index = np.arange(2001,2006)
sample.index.name = 'year'
sample

# 딕셔너리를 이용한 추가 
sample.loc[2006]={'서울':10,'경기':20,'충청':40,'경상':21,'전라':37,'제주':103,'부산':28,
                 '수도권':30,'강원':15,'test':0}
sample

# 로우 추가 : 로우간의 연산으로 데이터 추가 
# 2007 로우 추가 하되 2005년과 2006년의 합으로 구성해주세요 
sample.loc[2007]=sample.loc[2005]+sample.loc[2006]
sample

"""
로우, 컬럼 삭제
컬럼 삭제
del 키워드 + 컬럼 인덱싱
df.drop(col, axis=1)
df.drop(columns=col)
로우 삭제
df.drop(idx) : axis = 0 (기본값)"""

# 컬럼 삭제 1 : del 키워드 + 컬럼 인덱싱
# 특징 : 원본 객체에서 바로 데이터가 사라짐
del sample['test']
sample

# 컬럼 삭제 2 : df.drop(columns=컬럼 이름)
# 특징 : 원본 반영 되지 않음 => inplace = True로 원본에 바로 반영 시킬 수 있음
sample.drop(columns='경상',inplace=True) # inplace = True를 치면 결과값이 안보여진다. 바로 반영이 되어서 그렇다.

# 컬럼 삭제 3 : df.drop(컬럼이름, axis=1, inplace=)
sample.drop('충청',axis=1,inplace=True)

#로우 삭제
# df.drop(로우명, axis=0 (기본값=적지 않아도 상관없다), inplace=)
sample.drop(2005,inplace=True)

# 두개 이상의 컬럼이나 로우 삭제 : 리스트로 묶어서 전달
# 컬럼 삭제 (제주, 강원)
sample.drop(['제주','강원'],axis=1)

# 로우 역시 리스트로 묶어서 삭제한다.
# 2004, 2007을 삭제해주세요
sample.drop([2004,2007])
