#3-4대비 변경 
# return HttpResponseRedirect('/vote/result/%s/'%(c.id)) 대신 별칭 기반으로 return (5-2 urls.py 계속) 

from django.shortcuts import render
from django.http.response import HttpResponseRedirect
from django.urls.base import reverse

# Create your views here.
'''
views.py : MTV패턴 중 실직적인 데이터추출, 연산, HTML 전달의
기능이 구현되는 파일
view의 기능을 구현할 때는 클래스/함수를 정의해 사용할 수 있음.
함수를 정의해 view의 기능을 구현할때는 첫번째매개변수를 필수적으로 있어야 한다. 

request : 웹 클라이언트의 요청정보가 저장된 매개변수
request안에는 <form>를 바탕으로 사용자가 입력한 값이나 
로그인 정보, 요청방식 등을 변수형태로 저장하고 있다.
'''


#Question 모델 클래스 import 
from vote.models import Question,Choice
    
#메인화면 - 데이터 베이스에 저장된 Question객체를 바탕으로 HTML을 전달

def main(request):
    #데이터베이스에 저장된 모든 Question 객체를 추출
    '''
    Question.object : 데이터 베이스에 저장된 Question객체들을
    접근할때 사용하는 변수 
    객체를 접근할때는 4가지 함수로 접근할 수 있음.
    all():데이터 베이스에 저장된 모든 객체를 리스트형태로 추출
    get(조건):데이터 베이스에 저장된 객체 중 조건을 만족하는 객체 1개를 추출
    filter(조건) : 데이터베이스에 저장된 객체 중 조건을 만족하는 모든 객체를 리스트형태로 추출
    exclude(조건) : 데이터베이스에 저장된 객체 중 조건을 만족하지 않는 객체를 리스트형태로 추출 
    '''
    q = Question.objects.all()
    print(q)
    #추출된 Question 객체를 HTML 편집에 사용할 수 있도록 전달
    return render(request,"vote/main.html",{'q':q})

#웹 클라이언트가 요청한 Question객체 한개와 연결된 choice객체 추출 
#q_id : 웹클라이언트가 요청한 Question 객체의 id변수 값 
def detail(request,q_id):
    #Question 객체를 한개 추출 - id변수값이 q_id와 같은 조건에 맞는
    q = Question.objects.get(id=q_id)
    #추출한 Question객체와 연동된 Choice객체들을 추출
    #외래키로 연결된 Question객체가 Choice객체들을 대상으로 
    #추출함수를 사용하려면 객체.choice_set.추출함수로 추출
    #외래키로 연결된 객체.외래키로 연결한 모델클래스명_set.all,get 
    c = q.choice_set.all()
    print(q)
    print(c)
    #HTML코드로 추출한 객체들 전달 
    return render(request,"vote/detail.html",{'q':q,'c':c})

#detail 화면에서 웹클라이언트가 선택한 Choice객체 id로 투표 진행
def vote(request):
    #조건문 - 사용자에게 요청한 방식이 post를 사용했는지 확인
    #request.method : 웹클라이언트의 요청방식을 저장한 변수 
    #"GET"또는 "POST" 문자열을 저장하고 있음 (모두 대문자이다.)
    if request.method == "POST": #request 변수로 연산자 수행
        #post요청으로 들어온 데이터 중 name=select에 저장된 값을 추출
        print(request.POST)
        c_id = request.POST.get('select') 
        #request에 다시 물어본다. POST는 사전형 데이터, select라는 이름으로 저장된 값을 얻고 싶다,   
        #POST요청으로 들어온 데이터는 request.POST에 사전형으로 저장됨
        #GET요청으로 들어온 데이터는 request.GET에 사전형으로 저장됨 
        #<form>태그에 작성된 사용자 입력을 추출할때는 name 속성에 적힌 문자열로 추출할 수 있다. 
        
        #Choice객체 한개 추출 - select 값을 id변수에 저장한 객체
        c = Choice.objects.get(id=c_id)
        
        #추출한 Choice객체 votes변수값을 +1누적
        c.votes = c.votes + 1
        
        #변경된 값을 데이터베이스에게 알려줌 
        c.save()
        
        #result 뷰 함수의 주소를 웹클라이언트에게 전송 
        #return HttpResponseRedirect('/vote/result/%s/'%(c.id))
        #별칭기반으로 result 뷰함수의 URL을 추출 및 전달
        return HttpResponseRedirect(reverse('result',args=(c.id,) ))
    
#Choice 객체의 id를 바탕으로 설문결과 출력
def result(request,c_id):
    #c_id 기반의 choice 객체 한개 찾기 
    c = Choice.objects.get(id=c_id)
    #Choice 객체와 연동된 Question 객체 추출


    # ~와 연동된 = ~. / ?의 객체 추출 = ~.!
    # q= Question.objects.get(id=c.q.id) #c에 연동된 q의 id값과 같은 Question 객체를 가져온다.
    q_2 = Question.objects.get(id=c.q.id)
    print(q_2)
    q = c.q
    print("c.q: ",c.q)
    print("q_2: ",q_2)
    print("q:",q)
    
    #Question객체와 연동된 모든 Choice객체 추출
    c_list = q.choice_set.all()
    #c_list=c.q.choice_set.all() 와 같음 
    
    #결과화면 HTML에 Quetion객체와 Choice 객체 리스트를 전달
    return render(request, "vote/result.html",{'q':q,'c_list':c_list})
