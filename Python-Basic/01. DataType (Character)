# Data Type 1.
# Character (문자형 데이터)
# 생성하기 : 여닫는 따옴표는 반드시 문자의 앞 뒤에서 한쌍으로 완성해야한다.
# 1) 한준 문자열 : '',""
'10'
a = '안녕'
a = '안녕\n반가워'
print(a)

#2) 여러줄 문자열 : """ """. ''' '''
# print()했을때 enter(줄바꿈)이 그대로 반영되는 문자열로 처리 가능.
# 단 화면에서 보기를 하면 (print없이 주피터 노트북 결과로 보면)
# 줄바꿈이 바로 나타나지 않고 \n으로 처리된다. 

a = """안녕
반가워
다음에 만나자
빠이
"""
a
3) 문자속에 문자열 기호 사용하기 
# 문자열에 자주 쓰는 기호 : ',"
#언어 문자에서 많이 쓰이는 기호 : she's, "설렁탕을 사왔는데 왜 먹지를 못하나..."
a = "she's happy." #내부의 따옴표와 문자로 여닫는 따옴표의 종류를 다르게 한다. 
a
print(a)
title = '오늘은 "미세먼지" 좋음'
title
# 여닫는 따옴표와 같은 종류의 따옴표를 문자로도 쓰고 싶을때는 따옴표 왼쪽에 \를 붙인다. 
title_2="오늘은\"미세먼지\"좋음"
title_2

#만약 단일 따옴표를 쓰는데도 불구하고 여닫는 부분을 다른줄로 하고 싶다면...  끝나는 부분에 
#끝에 \만 붙여준다. 계속 이어진다는 의미 
c='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\
aaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
c

"""
<<연습문제>>

### 1. 아래와 같은 여러 줄의 문장을 문자열로 만들어서 lines, line이라는 변수에 할당하세요

> 파이썬도 배우고
> 장고도 배우고
> 할게 너무 많아

방법1) 여러 줄 문자열 활용하기
방법2) 한 줄 문자열 내부에서 \n 사이사이에 활요하기

"""

line="파이썬도 배우고\n장고도배우고\n할게 너무 많아"
print(line)

lines="""파이썬도 배우고
장고도 배우고
할게 너무 많아"""

print(lines)

#연산하기
# 1) 산술연산자 : 문자, 숫자를 함께 연산하기 위한 문법 기호 
# 문자와 문자를 연결
# 동일한 문자를 반복해서 연결

# 문자와 문자 연결 : +
'가' + '나'

# 1. 가 나 로 출력하기 위해 문자열 자체에 공백 추가하기
'가'+' 나'

# 2. 두 문자 사이에 공백을 더하기 
'가'+' '+'나'

# 문자 + 숫자
'가' + 1 # TypeError: can only concatenate str (not "int") to str

'가' + str(1)

# 문자를 여러번 반복하기 : *
# 동일한 문자열을 여러번 반복 연결시켜줌
'abc' * 3  

#문자 * 문자 = error
'abc' * 'a' # TypeError: can't multiply sequence by non-int of type 'str'

"""
### 2) 비교연산자 : 문자의 크기를 비교하기 위한 문법 기호 

> 문자의 비교 
* 대문자 vs 소문자 : 대문자 < 소문자 크기가 더 크다.
* 알파벳 : 알파벳 순서가 뒤에 있을수록 크기가 더 크다.
* 문자 길이 : 문자열의 길이가 길수록 크기가 더 크다. 

컴퓨터는 기계어 0과 1 밖에 없다. (2진수)
bit -> 0이나 1을 한글자 넣을 수 있는 크기 
1byte = 8bit

A라는 문자를 쓰면 A랑 매칭되어 있는 2진수로 바꿔서 계산한다. 
매칭되어 있는 숫자가 있기 때문에 문자끼리 대소 비교가 된다. 

A가 65부터 시작하고 
a는 97부터 시작한다. 따라서 소문자가 더 크다 .

아스키코드 다음이 유니코드 (2바이트)
"""

'a' >= 'A'

#문자열을 대상으로 할 때는 무조건 첫 글자끼리만 비교한다.
#문자 길이는 실제 크기 비교에는 영향을 미치지 않는다.
'b' < 'BTS' #b는 98 B는 66

# 영문자와 영문자 이외의 다른문자간 비교는 무조건 영문자가 작게 나온다.
# Asciicode VS Unicode
'b' < '가'

"""
# >인덱스
- 아이템(대상이 가지고 있는 최소 단위의 값)의 위치를 나타내는 고유한 번호
- 첫 번째 위치는 0부터 시작
- 마지막 위치는 -1부터 시작

### 1) 인덱싱(indexing) : 특정 위치의 하나의 아이템에 접근하기
- 인덱싱 문법기호 : 객체[인덱스번호]
"""

#banana라는 문자열에 대해 인덱싱
text = 'banana'
text

# banana라는 문자열의 첫번째 문자 = 0번째 인덱스 번호
# 인덱싱 문법 : 문자열 (대상 : 값, 자료형)[인덱스번호]

text[0]

"""
### 2) 슬라이싱 : 연속된 범위의 여러 아이템에 접근

* 대상객체[처음인덱스:마지막인덱스(:간격)]
* 처음 인덱스 번호는 포함(n부터~)
* 마지막 인덱스 번호는 포함하지 않음(~n-1까지)
* 간격조정은 할 수 도 있고 하지 않을수도 있음
"""

#문자열 생성
text = 'hello python world'
text

# 처음부터 특정 위치까지 : ~python
# 처음인덱스 : 0
# 마지막 인덱스 : -7(뒤에서 7번째까지 잡아와야 하므로 실제로는 -6까지 타겟으로)
# 간격 : 기본값(1)

text[0:-6]

# 첫 인덱스가 0으로 스타트를 끊는다면 생략 가능
text[:-6]

# 전체 : 처음 인덱스와 마지막 인덱스를 모두 쓰지 않으면 전체 아이템을 가져오는 결과
# 처음 인덱스 기본값 : 0 
# 마지막 인덱스 기본값 : 마지막 까지
text[:]

#간격값으로 2를 주고 전체 범위 슬라이싱
text[::2]

text[1::2]

"""
## >연습문제
### 20191116미세먼지양호함
#### 위의 문장을 weather변수에 저장한 다음
### 날짜는 date변수에 슬라이싱으로 받아오고, micro변수에 미세먼지 정도를 
#### 슬라이싱으로 받아오도록 만들어서 출력해주세요

출력양식 : <br>  #br은 한칸 내려라 \n과 같음 
날짜 : 20191116
날씨 : 미세먼지양호함

"""

weather='20191116미세먼지양호함'
date=weather[:8]
micro=weather[8:]
print('날짜 : %s \n날씨 : %s' %(date,micro))

"""
# >포매팅(Formatting)
특정 값만 바뀌고 일정한 형식을 가지는 문자열을 작성할 수 있는 기법 

### 1. %포매팅

* 데이터 타입에 따른 분류 : 정수, 실수, 문자
* 옵션 : 문자열 길이, 표현할 아이템 개수, 정렬, 공백

### 1) 숫자 값 대입 
"""
# 1. 가변자료가 들어갈 자리 (땡땡...에 해당하는)에 구멍 (%자료형)을 낸다.
# 2. 구멍이 뚫린 문자열 뒤에 %로 연결한 다음 집어 넣을 값을 적는다. 
#정수 값 포매팅 : 정수(int) -> %d
'오늘은 %d일입니다.' %21
# 정수 자리의 의미 : 출력되는 형식이 정수라는 의미
# 반올림이 아닌 소수점 아래를 버린다. 
'오늘은 %d일입니다.' %21.12975   #digit의 약자 

# 실수 (float)값 포매팅
# %f를 이용하여 값에 대한 구멍을 낸다.
# %f는 기본적으로 소수점 아래 6자리까지 표현

'%f' %15

# 실수 값 포매팅2 : 집어넣는 값을 실수로 적용
# 실수값 포매팅은 반올림이 적용된다. 7번째자리에서 반올림한다. 

'%f' %1.123456789

#옵션 : 소수점 아래 자리를 몇자리까지 출력할지 정할 수 있음.
# %o.nf : 소수점 아래 n자리까지만 표현하는 실수

'%.3f' %1.123456789

# 가변 자료를 2개 이상 넣는 케이스
# 집어넣는 값은 왼쪽부터 하나씩 전달됨
# 2개 이상을 집어 넣는 경우는 %(첫번째값, 두번째 값, ...)과 같이 튜플로 전달한다.
'오늘은 %d월 %d일입니다.' %(11,16)

"""
# 2) 문자 대입
- %s로 구멍 뚫기
- 집어넣는 값에 대해서는 제한이 없다.
- 만능 포매팅
"""


# 집어넣는 값 : 문자인 경우 
'%s님 접속을 환영합니다.' %'abc1234'

"""
### 3) 옵션 설정하기

> 작성순서 : '%+정렬기호+문자열길이+.+표현할아이템개수+데이터타입' %집어넣을 값
* 문자열 길이  :구멍 뚫린 자리의 문자열 길이, 따로 옵션을 주지 않으면 집어넣을 값의 길이에 맞춰짐
* 공백 : 문자열 길이 + 정렬 옵션을 설정하면 자동으로 생성됨
* 정렬 : 기본적으로는 오른쪽 정렬(문자열 길이가 양수값), 음수 값으로 전달하면 왼쪽 정렬
* 표현할 아이템 개수 : 실수인 경우는 소수점 아래자리에 적용
* 문자열 안에서 % 기호 사용 
"""

#가변 자료 위치를 10칸 확보하고 오른쪽 정렬

'%10s님 접속을 환영합니다.' %'abc1234'

# 가변자료 위치를 10칸 확보하고 왼쪽 정렬

'%-10s님 접속을 환영합니다.' %'abc1234'

# 실수의 경우는 %칸 확보, 소수점 아래 문자 종류 순으로 나열합니다.
'%-20.2f 수치 기록' %12.19248


"""
# <<연습문제>>

### 아래 문장에 대해 조건을 만족하는 포매팅을 작성해주세요.
"날짜 : 2019-09-21 / 출석률 : 90%"
    - 전달하는 값 : 4개
    - 출석한 학생 수 : 19명
    - 총 학생수 : 21명
    - 출석률은 소수점 첫 번째 자리에서 반올림 적용 
"""

year = '2019'
month = '09'
day = '21'
출석 = 19
총원 = 21
'날짜 : %s-%s-%s / 출석률 : %0.0f%%' % (year,month,day,출석/총원*100)

"""
### 2. {}포매팅
* '문자열'.format() 을 사용하는 포매팅
* 값을 대입하는 방법
    - 인덱스 번호 (가장 일반적 방법)
    - 변수명 & 변수값 => 변수 선언문을 format 함수에 작성, 변수명을 가변자료에 입력
    - 인덱스 번호, 변수명 혼합(잘 사용 안함)
* 옵션 : 문자열 길이, 정렬, 공백 대체 문자, 표현할 값 개수 (데이터 타입 지정)

### 1) 인덱스 번호로 대입 
"""

# format() 함수의 인자 값으로 들어간 위치를 
# 문자열 안의 가변인자 위치에 작성하면 원하는 순서대로 넣을 수 있음.
# 기본동작(인덱스번호 미사용시) : 순서대로 대입
'{} {} {}'.format(100,200,300)

# 장점 : 들어오는 것은 문자로 강제로 바꿔서 들어온다. %s / %d /%f같은 차이점이 없다.
# 자료형을 따로 지정을 안한다. 

#순번 입력시 순번 기반으로 입력

'{2} {0} {1}'.format(100,200,300)

# {}에 인덱스 번호를 대입하는 경우에는 format()함수에 값, 변수(이미 만들어진)를 인자값으로 집어 넣음

'{x2}'.format(x2=100)

"""
### 3) 인덱스 번호 & 변수명 대입
    - format() 함수 내에서 인덱스 번호에 해당하는 값을 먼저 작성
    - 번호가 다 사용된 후에 변수 선언문을 사용해야 적용이 잘됨 
"""

x=10

#기존에 사용했던 (생성했던) 변수와 함께 새롭게 정의한 값을 추가해서 사용
#새롭게 정의한 값을 다시 사용할 필요가 없을때

'{} {test}'.format(x,test=100)

#순서가 바뀐다면? error가 난다. 거의 순서대로 써야 한다. 
'{} {test}'.format(test=100,x) # SyntaxError: positional argument follows keyword argument

"""
### 4) 옵션 설정하기
> 작성순서

* 데이터타입을 지정하지 않는 경우 : {인덱스번호+:+공백대체문자+정렬기호+문자열길이}
* 표현할자리수를 설정하는 경우 : {인덱스번호+:+공백대체문자+정렬기호+문자열길이+표현할자리수+(데이터타입)}
    * 정렬 : 가운데 정렬 (^), 좌측 정렬(<), 우측정렬(>)
    * 문자열 길이
    * 공백 대체 문자 : 문자열 길이와 정렬이 설정되어야 사용할 수 있다.
    * 데이터 타입 : 실수와 문자 타입만 표현할 자리수를 설정할 수 있다.
"""

# 문자열 길이가 10이며 hi라는 문자가 오른쪽으로 정렬된 포매팅

'{0:>10}'.format('hi')

#왼쪽 정렬 
'{:<10}'.format('hi')

#가운데 정렬을 하면서 동시에 공백을 띄어쓰기 대신 *로 채우기
'{:*^10}'.format('hi')

#실수 타입에 사용하는 포매팅
# 소수점 3자리까지만 출력하기
# 원래 {} f 포매팅은 자료형 지정을 안하지만 자리수를 설정할때만 예외적으로 지정함

'{:.3f}'.format(1.23456789)

# 문자에 사용하는 포매팅 
# 3글자만 출력하기
'{:.3s}'.format('가나다라마바사')

"""
# >문자열 내장함수 * = 문자열 메서드
  내장함수 : 특정 데이터 타입이 자체적으로 가지고 있는 속성으로 존재하는 함수
  문법 : 변수(데이터타입값).함수명()
  
* count() : 특정 문자의 개수
* find() : 특정 문자의 인덱스 번호(위치)
* join() : 특정 기호를 문자열 아이템 사이에 입력
* upper() : 문자열을 대문자로 변경
* lower() : 문자열을 소문자로 변경
* capitalize() : 문자열의 첫 글자를 대문자로
* swapcase() : 대문자는 소문자로, 소문자는 대문자로 전환
* lstrip(), rstrip(), strip() : 좌/우/앞 뒤 공백(기본) 및 특정 문자 지우기
* replace() : 기존 문자를 새로운 문자로 바꾸기
* split() : 특정 기호를 기준으로 문자열을 아이템 단위로 나누어 리스트로 반환
* center() : 문자열 길이를 지정하여 대상 문자열을 중앙 정렬
* ljust() : 문자열 길이를 지정하여 대상 문자열을 왼쪽 정렬
* rjust() : 문자열 길이를 지정하여 대상 문자열을 오른쪽 정렬
""

# 문자열 생성

text = 'tomato juice'

# count()
# text.count(찾을 문자열)

text.count('to')  

#없으면 error가 안뜨고 0이 나온다. 
#2글자 이상 단어도 찾는다. 

# find() : 특정 값의 인덱스 번호를 반환
# text 문자열에서 a의 인덱스 번호 
text.find('o') # 중복값은 0번에서 가장 가까운 인덱스 하나만 조회해줌 
text.find('o',2) #두번째 파라미터는 n번부터 조회하라는 명령을 담당 두번째 파라미터의 기본값은 0

# upper()
# 변경한 결과를 시뮬레이션 해서 보여줌(원본자료는 대문자화 되지 않음)
text2=text.upper()

text2

text2.lower()

#lstrip()
#문자열의 왼쪽에 있는 공백 전부 제거(가운데는 제거 안함)
#임시적인 결과만 보여줌 (원본 변형x)

text3="         123        123           "

text3.lstrip()

text3.rstrip()

#strip()
#왼쪽 오른쪽 구분없이 다 공백 제거 

text3.strip()

#replace(old,new) 
# 찾아 바꾸기, 문자열 내에서 old에 해당하는 문자를 찾아 new로 싹 다 대체
# 공백 역시 찾아 없앨 수 있음
# 역시 원본 자료에는 영향을 미치지 않고 일시적으로 변경

text3.replace(' ','')

text3

# split('기준')
# 쪼개기
# 기준 입력시 기준점을 기준으로 쪼개고 입력 안하면 ' ',\n,\t등을 기준으로 쪼갬 

text4='a b c'

text4.split()

# 기준 설정시 공백이 아닌 기준 대상으로 쪼개기
# "," 대상으로 쪼갤 경우 나오는 text5의 결과물은 4개 

text5="a,b,c,ddes"

text5.split(",")
